{"cells":[{"cell_type":"markdown","metadata":{"id":"3BxrYBmsox25"},"source":["# Importing libraries and graphics configurations ###"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KAiHi4-NlZ6O"},"outputs":[],"source":["import numpy as np\n","import torch\n","import pandas as pd\n","import time\n","import random\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, confusion_matrix,f1_score,classification_report\n","import matplotlib\n","#%matplotlib notebook\n","import matplotlib.pyplot as plt\n","import scipy.stats\n","from sklearn.model_selection import train_test_split\n","import matplotlib.offsetbox as offsetbox\n","from matplotlib.ticker import StrMethodFormatter\n","import plotly.express as px\n","from google.colab import files\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.preprocessing import StandardScaler,LabelEncoder,OneHotEncoder,MinMaxScaler  \n","from sklearn.impute import SimpleImputer\n","from sklearn.model_selection import train_test_split \n","from keras.preprocessing.sequence import TimeseriesGenerator\n","from keras.models import Sequential\n","from keras.layers import Dense,LSTM \n","from tensorflow.keras import layers\n","from math import sqrt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ga0fQvjbotx1"},"outputs":[],"source":["#for some reason, this needs to be in a separate cell\n","params={\n","    \"font.size\":15,\n","    \"lines.linewidth\":5,\n","}\n","plt.rcParams.update(params)"]},{"cell_type":"markdown","metadata":{"id":"pCU9g1Ljo3Rc"},"source":["# Import data ###"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":2685,"status":"ok","timestamp":1670462873578,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"X0ZL3hwE9dsx","outputId":"506de1ce-fb28-4d49-a497-bf8a0e3d2c94"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             CASE_STATUS RECEIVED_DATE DECISION_DATE    EMPLOYER_CITY  \\\n","0  Certified - Withdrawn    2019-10-01    2022-04-20               WI   \n","1  Certified - Withdrawn    2019-10-01    2022-04-05  RIDGEFIELD PARK   \n","2  Certified - Withdrawn    2019-10-01    2021-12-01          Hoboken   \n","3  Certified - Withdrawn    2019-10-02    2022-03-08        Charlotte   \n","4  Certified - Withdrawn    2019-10-02    2021-12-09       Los Alamos   \n","\n","  EMPLOYER_STATE WORKSITE_CITY WORKSITE_STATE  WORKSITE_WORKERS  \n","0             WI         Plano             TX                 1  \n","1             NJ         Plano             TX                 1  \n","2             NJ       Hoboken             NJ                 1  \n","3             NC        Denver             CO                 1  \n","4             NM    Los Alamos             NM                 1  "],"text/html":["\n","  <div id=\"df-1e81073f-8a64-4a65-bd06-7d0d861d574d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CASE_STATUS</th>\n","      <th>RECEIVED_DATE</th>\n","      <th>DECISION_DATE</th>\n","      <th>EMPLOYER_CITY</th>\n","      <th>EMPLOYER_STATE</th>\n","      <th>WORKSITE_CITY</th>\n","      <th>WORKSITE_STATE</th>\n","      <th>WORKSITE_WORKERS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2022-04-20</td>\n","      <td>WI</td>\n","      <td>WI</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2022-04-05</td>\n","      <td>RIDGEFIELD PARK</td>\n","      <td>NJ</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2021-12-01</td>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-02</td>\n","      <td>2022-03-08</td>\n","      <td>Charlotte</td>\n","      <td>NC</td>\n","      <td>Denver</td>\n","      <td>CO</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-02</td>\n","      <td>2021-12-09</td>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e81073f-8a64-4a65-bd06-7d0d861d574d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1e81073f-8a64-4a65-bd06-7d0d861d574d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1e81073f-8a64-4a65-bd06-7d0d861d574d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":131}],"source":["# importing visas data\n","is_pickle_file_available = True\n","is_running_locally = False\n","\n","if is_running_locally: \n","    file = 'datafile_visas.pkl'\n","    fileobj = open(file, 'wb')\n","    pickle.dump(data1, fileobj)\n","elif (is_pickle_file_available):\n","    import pickle \n","    from pydrive.auth import GoogleAuth\n","    from pydrive.drive import GoogleDrive\n","    from google.colab import auth\n","    from oauth2client.client import GoogleCredentials\n","    auth.authenticate_user()\n","    gauth = GoogleAuth()\n","    gauth.credentials = GoogleCredentials.get_application_default()\n","    drive = GoogleDrive(gauth)\n","    # https://drive.google.com/file/d/1YTCHoDPfW0SPGTAjXRStwaqrGGzvZmru/view?usp=sharing\n","    fileDownloaded = drive.CreateFile({'id':'1YTCHoDPfW0SPGTAjXRStwaqrGGzvZmru'})\n","    file = 'datafile_visas.pkl'\n","    fileDownloaded.GetContentFile(file)\n","    fileobj = open(file, 'rb')\n","    data1 = pickle.load(fileobj)\n","else :\n","    from pydrive.auth import GoogleAuth\n","    from pydrive.drive import GoogleDrive\n","    from google.colab import auth\n","    from oauth2client.client import GoogleCredentials\n","    auth.authenticate_user()\n","    gauth = GoogleAuth()\n","    gauth.credentials = GoogleCredentials.get_application_default()\n","    drive = GoogleDrive(gauth)\n","    fileDownloaded = drive.CreateFile({'id':'1n0iEUlY_msB-VkssivNDSp6-z_NnBpT4'})\n","    fileDownloaded.GetContentFile('LCA_Disclosure_Data_FY2022_Q3.csv')\n","    data = pd.read_csv('LCA_Disclosure_Data_FY2022_Q3.csv', encoding='cp1252')\n","    columnsNamesArr = data.columns.values\n","    print(columnsNamesArr)\n","    data.head()\n","    ## Deleting unnecessary columns\n","    data1 = data[['CASE_STATUS','RECEIVED_DATE','DECISION_DATE','EMPLOYER_CITY','EMPLOYER_STATE','WORKSITE_CITY','WORKSITE_STATE','WORKSITE_WORKERS']]\n","    # Removes SettingWithCopyWarning\n","    data1 = data1.copy()\n","    data1['RECEIVED_DATE'] = pd.to_datetime(data1['RECEIVED_DATE'])\n","    data1['DECISION_DATE'] = pd.to_datetime(data1['DECISION_DATE'])\n","    import pickle\n","    file = 'datafile_visas.pkl'\n","    fileobj = open(file, 'wb')\n","    pickle.dump(data1, fileobj)\n","data1.head()"]},{"cell_type":"markdown","metadata":{"id":"5MMb9H2b_12a"},"source":["### Importing construction data - THIS PORTION HAS BEEN DISABLED AFTER DISCUSSION WITH PROFESSOR."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1670462873579,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"fy-Uo6nKOfch","outputId":"3a2b5cb0-87df-4e20-86ab-c9b065f84a39"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nis_construction_pickle_available = True\\n\\ndef getfile(location_pair,**kwargs): #tries to get local version and then defaults to google drive version\\n    (loc,gdrive)=location_pair\\n    try:\\n        out=pd.read_csv(loc,**kwargs)\\n    except FileNotFoundError:\\n        print(\"local file not found; accessing Google Drive\")\\n        loc = \\'https://drive.google.com/uc?export=download&id=\\'+gdrive.split(\\'/\\')[-2]\\n        out=pd.read_csv(loc,**kwargs)\\n    return out\\n\\nif (is_construction_pickle_available is False): \\n    fname=(\"ConstructionData.csv\",\"https://drive.google.com/file/d/1rpV2bc4k4SnFcT2K0SuO23X_jzWLoO56/view?usp=sharing\")\\n    data2 = getfile(fname)\\n    columnsNamesArr = data2.columns.values\\n    data2[\\'Month\\'] = pd.to_datetime(data2[\\'Month\\'])\\n    print(columnsNamesArr)\\n    import pickle\\n    pickle.dump(data2, open(\\'datafile_construction.pkl\\', \\'wb\\'))\\nelse: \\n    import pickle \\n    from pydrive.auth import GoogleAuth\\n    from pydrive.drive import GoogleDrive\\n    from google.colab import auth\\n    from oauth2client.client import GoogleCredentials\\n    auth.authenticate_user()\\n    gauth = GoogleAuth()\\n    gauth.credentials = GoogleCredentials.get_application_default()\\n    drive = GoogleDrive(gauth)\\n    # https://drive.google.com/file/d/1UKnqLf985Ul1sYNVObClto9zQtcJekyU/view?usp=sharing\\n    fileDownloaded = drive.CreateFile({\\'id\\':\\'1UKnqLf985Ul1sYNVObClto9zQtcJekyU\\'})\\n    file = \\'datafile_construction.pkl\\'\\n    fileDownloaded.GetContentFile(file)\\n    fileobj = open(file, \\'rb\\')\\n    data2 = pickle.load(fileobj)\\ndata2.head()\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":132}],"source":["# \n","'''\n","is_construction_pickle_available = True\n","\n","def getfile(location_pair,**kwargs): #tries to get local version and then defaults to google drive version\n","    (loc,gdrive)=location_pair\n","    try:\n","        out=pd.read_csv(loc,**kwargs)\n","    except FileNotFoundError:\n","        print(\"local file not found; accessing Google Drive\")\n","        loc = 'https://drive.google.com/uc?export=download&id='+gdrive.split('/')[-2]\n","        out=pd.read_csv(loc,**kwargs)\n","    return out\n","\n","if (is_construction_pickle_available is False): \n","    fname=(\"ConstructionData.csv\",\"https://drive.google.com/file/d/1rpV2bc4k4SnFcT2K0SuO23X_jzWLoO56/view?usp=sharing\")\n","    data2 = getfile(fname)\n","    columnsNamesArr = data2.columns.values\n","    data2['Month'] = pd.to_datetime(data2['Month'])\n","    print(columnsNamesArr)\n","    import pickle\n","    pickle.dump(data2, open('datafile_construction.pkl', 'wb'))\n","else: \n","    import pickle \n","    from pydrive.auth import GoogleAuth\n","    from pydrive.drive import GoogleDrive\n","    from google.colab import auth\n","    from oauth2client.client import GoogleCredentials\n","    auth.authenticate_user()\n","    gauth = GoogleAuth()\n","    gauth.credentials = GoogleCredentials.get_application_default()\n","    drive = GoogleDrive(gauth)\n","    # https://drive.google.com/file/d/1UKnqLf985Ul1sYNVObClto9zQtcJekyU/view?usp=sharing\n","    fileDownloaded = drive.CreateFile({'id':'1UKnqLf985Ul1sYNVObClto9zQtcJekyU'})\n","    file = 'datafile_construction.pkl'\n","    fileDownloaded.GetContentFile(file)\n","    fileobj = open(file, 'rb')\n","    data2 = pickle.load(fileobj)\n","data2.head()\n","'''"]},{"cell_type":"markdown","metadata":{"id":"uNEGST0OOXjt"},"source":["### Clean data ###"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_EOZkb-5JL_X"},"outputs":[],"source":["data1.head(5)\n","data_x = data1.copy() # this is the data that will be used for benchmarking. DO NOT EDIT - Dushyant. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1670462873579,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"0zcvTcRGeZnP","outputId":"7a273ebe-20ed-4bb2-f7fe-76b465f3693b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             CASE_STATUS RECEIVED_DATE DECISION_DATE    EMPLOYER_CITY  \\\n","0  Certified - Withdrawn    2019-10-01    2022-04-20               WI   \n","1  Certified - Withdrawn    2019-10-01    2022-04-05  RIDGEFIELD PARK   \n","2  Certified - Withdrawn    2019-10-01    2021-12-01          Hoboken   \n","3  Certified - Withdrawn    2019-10-02    2022-03-08        Charlotte   \n","4  Certified - Withdrawn    2019-10-02    2021-12-09       Los Alamos   \n","\n","  EMPLOYER_STATE WORKSITE_CITY WORKSITE_STATE  WORKSITE_WORKERS  \n","0             WI         Plano             TX                 1  \n","1             NJ         Plano             TX                 1  \n","2             NJ       Hoboken             NJ                 1  \n","3             NC        Denver             CO                 1  \n","4             NM    Los Alamos             NM                 1  "],"text/html":["\n","  <div id=\"df-8d1d4c65-4452-402a-a98e-935f77d657f0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CASE_STATUS</th>\n","      <th>RECEIVED_DATE</th>\n","      <th>DECISION_DATE</th>\n","      <th>EMPLOYER_CITY</th>\n","      <th>EMPLOYER_STATE</th>\n","      <th>WORKSITE_CITY</th>\n","      <th>WORKSITE_STATE</th>\n","      <th>WORKSITE_WORKERS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2022-04-20</td>\n","      <td>WI</td>\n","      <td>WI</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2022-04-05</td>\n","      <td>RIDGEFIELD PARK</td>\n","      <td>NJ</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-01</td>\n","      <td>2021-12-01</td>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-02</td>\n","      <td>2022-03-08</td>\n","      <td>Charlotte</td>\n","      <td>NC</td>\n","      <td>Denver</td>\n","      <td>CO</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Certified - Withdrawn</td>\n","      <td>2019-10-02</td>\n","      <td>2021-12-09</td>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d1d4c65-4452-402a-a98e-935f77d657f0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8d1d4c65-4452-402a-a98e-935f77d657f0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8d1d4c65-4452-402a-a98e-935f77d657f0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":134}],"source":["data1.head()"]},{"cell_type":"markdown","metadata":{"id":"f8YFuDnSdXeG"},"source":["# Data Visualization"]},{"cell_type":"markdown","metadata":{"id":"Spb150JhI4t-"},"source":["###Creating plots to see the trends in various states for Accepted, denied and other types of case status"]},{"cell_type":"markdown","metadata":{"id":"gnHtOHPe55Jh"},"source":["#### Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FYNDYSiKdZhY"},"outputs":[],"source":["data_viz = data1.copy() #data to be used for visualizations"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1670462873580,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"Zs5xeHhvffZx","outputId":"be750614-5d3a-466d-f3cb-2bd9da1975be"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["CASE_STATUS          0\n","RECEIVED_DATE        0\n","DECISION_DATE        0\n","EMPLOYER_CITY        0\n","EMPLOYER_STATE      82\n","WORKSITE_CITY       11\n","WORKSITE_STATE       0\n","WORKSITE_WORKERS     0\n","dtype: int64"]},"metadata":{},"execution_count":136}],"source":["data_viz.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CfwYJ15BfdJw"},"outputs":[],"source":["##As we have some null values, dropping rows with null values in EMPLOYER_STATE AND WORKSITE_CITY\n","data_viz.dropna(inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eR8qE_55o9q4"},"outputs":[],"source":["def plotmap1(column,value,title):\n","  demo = data_viz.loc[data_viz['CASE_STATUS'] == value]\n","  experiment = demo.groupby(column).sum().rename(columns = {'WORKSITE_WORKERS' : 'Count'})\n","  fig = px.choropleth(experiment,\n","                      locations=experiment.index, \n","                      locationmode=\"USA-states\", \n","                      scope=\"usa\",\n","                      color='Count',\n","                      color_continuous_scale=\"Viridis_r\"\n","                      )\n","\n","  fig.update_layout(\n","        title_text = title,\n","        title_font_family=\"Times New Roman\",\n","        title_font_size = 22,\n","        title_font_color=\"black\", \n","        title_x=0.45,\n","        showlegend=False \n","          )\n","  fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UNFYafhaUyFO"},"outputs":[],"source":["def plotmap2(column,title):\n","  total = {}\n","  for i in data_viz[column]:\n","    if i in total:\n","      total[i] += 1\n","    else:\n","      total[i] = 1\n","  state = []\n","  values  = []\n","  for key,value in total.items():\n","    state.append(key)\n","    values.append(value)\n","  demo = pd.DataFrame(list(zip(state, values)),\n","                columns =[column, 'Count'])\n","\n","  fig = px.choropleth(demo,\n","                      locations=column, \n","                      locationmode=\"USA-states\", \n","                      scope=\"usa\",\n","                      color='Count',\n","                      color_continuous_scale=\"Viridis_r\"\n","                      )\n","\n","  fig.update_layout(\n","          title_text = title,\n","          title_font_family=\"Times New Roman\",\n","          title_font_size = 22,\n","          title_font_color=\"black\", \n","          title_x=0.45,\n","          showlegend=False \n","            )\n","  fig.show()"]},{"cell_type":"markdown","metadata":{"id":"FsqWo2ZI0PXQ"},"source":["#### Maps by Employer State"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1670462874387,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"YqDtdZa-x1jM","outputId":"455fb14d-b591-459b-f2b8-cf6102cfd985"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"4cbf8d17-a72b-4167-9cf5-e162e7a1241f\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4cbf8d17-a72b-4167-9cf5-e162e7a1241f\")) {                    Plotly.newPlot(                        \"4cbf8d17-a72b-4167-9cf5-e162e7a1241f\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"EMPLOYER_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[14,156,446,295,5245,216,348,74,139,482,737,1,31,84,16,2802,188,47,75,61,1134,409,28,1675,284,602,63,3,487,26,96,64,1301,57,78,1996,540,58,155,629,2,51,132,5,185,2185,145,528,14,5648,384,22,18],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Certified - Withdrawn by Employer State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('4cbf8d17-a72b-4167-9cf5-e162e7a1241f');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"007cb88a-e6da-4d38-8a6e-9293a0eca1ef\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"007cb88a-e6da-4d38-8a6e-9293a0eca1ef\")) {                    Plotly.newPlot(                        \"007cb88a-e6da-4d38-8a6e-9293a0eca1ef\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"EMPLOYER_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[7,19,14,20,635,52,22,22,38,215,162,17,9,9,10,113,25,10,9,9,122,56,4,62,29,22,5,4,3,52,1,14,7,117,6,33,319,189,13,20,74,8,7,22,210,297,34,208,1,58,25,5,4],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Denied by Employer State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('007cb88a-e6da-4d38-8a6e-9293a0eca1ef');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"8da48017-d374-4574-90bc-1d8b05f21526\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"8da48017-d374-4574-90bc-1d8b05f21526\")) {                    Plotly.newPlot(                        \"8da48017-d374-4574-90bc-1d8b05f21526\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"EMPLOYER_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"FM\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[61,1302,3741,4177,243679,2867,3424,1557,2308,17532,3,12104,412,146,1431,830,27533,2688,1314,1303,927,18977,15090,278,14596,5008,3964,46,338,144,11262,305,4336,678,69462,610,842,41041,6792,932,1521,25603,45,1745,1711,265,4833,158270,2368,16309,31,205,121493,2916,253,205],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Certified by Employer State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('8da48017-d374-4574-90bc-1d8b05f21526');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f7b8a29e-3398-46dd-b3af-56f1e5711619\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f7b8a29e-3398-46dd-b3af-56f1e5711619\")) {                    Plotly.newPlot(                        \"f7b8a29e-3398-46dd-b3af-56f1e5711619\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"EMPLOYER_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[64,68,95,3047,80,90,46,37,327,308,19,3,29,8,592,91,22,34,21,360,169,7,384,111,111,11,281,4,43,10,985,25,16,786,147,29,24,300,24,43,3,142,1468,61,259,8,1943,65,9,4],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Withdrawn by Employer State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f7b8a29e-3398-46dd-b3af-56f1e5711619');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["values = {'Certified - Withdrawn':\"Certified - Withdrawn by Employer State\",'Denied':'Denied by Employer State',\n","          'Certified':'Certified by Employer State','Withdrawn':\"Withdrawn by Employer State\"}\n","for key,value in values.items():\n","  plotmap1('EMPLOYER_STATE',key,value)"]},{"cell_type":"markdown","metadata":{"id":"u8FilrNA0Vwl"},"source":["#### Maps by Worksite State"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":676,"status":"ok","timestamp":1670462875048,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"JlNsXKaiIjgW","outputId":"fa736a42-4a0c-4eb2-e079-4059fef0a102"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"0952b323-e7cd-4dda-960e-b443a51daec4\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0952b323-e7cd-4dda-960e-b443a51daec4\")) {                    Plotly.newPlot(                        \"0952b323-e7cd-4dda-960e-b443a51daec4\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"WORKSITE_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[11,156,230,386,5950,346,346,98,85,730,923,1,41,140,22,2706,269,89,65,62,1503,629,34,1542,372,579,71,7,656,52,66,77,769,53,75,2433,575,67,211,860,3,82,124,6,531,3435,145,629,17,1854,312,25,11],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Certified - Withdrawn by Worksite State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('0952b323-e7cd-4dda-960e-b443a51daec4');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"891c47e3-78f0-445c-bc53-a63f32a68e42\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"891c47e3-78f0-445c-bc53-a63f32a68e42\")) {                    Plotly.newPlot(                        \"891c47e3-78f0-445c-bc53-a63f32a68e42\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"WORKSITE_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"TN\",\"TX\",\"UT\",\"VA\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[7,22,24,33,560,61,22,21,19,245,129,16,9,10,11,107,110,8,10,10,157,60,3,51,27,29,6,5,13,77,11,10,11,107,10,30,304,191,11,30,87,8,5,21,36,390,34,197,64,22,5,2],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Denied by Worksite State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('891c47e3-78f0-445c-bc53-a63f32a68e42');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"01f5858f-3dcb-4162-90a9-ab13d8671ef1\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"01f5858f-3dcb-4162-90a9-ab13d8671ef1\")) {                    Plotly.newPlot(                        \"01f5858f-3dcb-4162-90a9-ab13d8671ef1\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"WORKSITE_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[91,1614,3528,14820,232597,10290,10367,3768,2270,21597,26201,422,208,2252,843,36585,9036,2287,2589,2325,26781,7655,376,16352,7910,6845,46,623,232,32092,338,2164,1687,35486,1039,1361,52422,13162,1749,8261,19806,59,3497,2571,280,7597,111114,3830,19030,42,561,85187,7399,433,136],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Certified by Worksite State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('01f5858f-3dcb-4162-90a9-ab13d8671ef1');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"5c65b72f-00b8-443c-9e3d-73008ad22c9d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5c65b72f-00b8-443c-9e3d-73008ad22c9d\")) {                    Plotly.newPlot(                        \"5c65b72f-00b8-443c-9e3d-73008ad22c9d\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"WORKSITE_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[2,67,57,209,3123,166,85,55,31,356,440,19,6,26,9,597,125,22,24,30,423,150,5,318,127,134,29,3,365,15,31,16,632,23,16,882,211,34,63,348,19,51,1,143,1738,66,321,8,1098,82,9,3],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Withdrawn by Worksite State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('5c65b72f-00b8-443c-9e3d-73008ad22c9d');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["values = {'Certified - Withdrawn':\"Certified - Withdrawn by Worksite State\",'Denied':'Denied by Worksite State',\n","          'Certified':'Certified by Worksite State','Withdrawn':\"Withdrawn by Worksite State\"}\n","for key,value in values.items():\n","  plotmap1('WORKSITE_STATE',key,value)"]},{"cell_type":"markdown","metadata":{"id":"J4kBDNgh0nHP"},"source":["#### Applications by Employer State vs Worksite State"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1670462875049,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"tWAJY2WvYt0J","outputId":"c5d2c319-7573-4d33-e426-c4bfb92b80af"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"bab03f32-fc53-42d0-9f1e-476a9f658da3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"bab03f32-fc53-42d0-9f1e-476a9f658da3\")) {                    Plotly.newPlot(                        \"bab03f32-fc53-42d0-9f1e-476a9f658da3\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"EMPLOYER_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"WI\",\"NJ\",\"NC\",\"NM\",\"FL\",\"MI\",\"CA\",\"AR\",\"MS\",\"MA\",\"DC\",\"PA\",\"OR\",\"IL\",\"OH\",\"TX\",\"GA\",\"NY\",\"RI\",\"WA\",\"MO\",\"VA\",\"CT\",\"KY\",\"AZ\",\"TN\",\"HI\",\"MN\",\"CO\",\"AL\",\"IN\",\"SC\",\"ND\",\"IA\",\"MD\",\"WV\",\"NV\",\"DE\",\"NE\",\"AK\",\"LA\",\"KS\",\"NH\",\"ME\",\"UT\",\"WY\",\"OK\",\"ID\",\"MT\",\"VT\",\"SD\",\"PR\",\"GU\",\"MP\",\"VI\",\"FM\"],\"name\":\"\",\"z\":[3337,50798,11858,687,11926,15793,110073,4249,412,19570,1559,18205,1702,28757,6992,58108,12905,34897,1789,35007,4619,14406,3844,1418,4437,4823,188,5246,3188,1230,2943,1860,324,1537,14870,285,940,2490,4486,82,1008,1387,745,317,2265,203,1018,862,149,228,257,54,447,38,29,3],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Applications by Employer State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('bab03f32-fc53-42d0-9f1e-476a9f658da3');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f72ce656-b046-4fbb-8ad0-34b56e75fa34\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f72ce656-b046-4fbb-8ad0-34b56e75fa34\")) {                    Plotly.newPlot(                        \"f72ce656-b046-4fbb-8ad0-34b56e75fa34\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"WORKSITE_STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"TX\",\"NJ\",\"CO\",\"NM\",\"NC\",\"FL\",\"MI\",\"CA\",\"AR\",\"MS\",\"WI\",\"MA\",\"VA\",\"PA\",\"IA\",\"OR\",\"AZ\",\"OH\",\"GA\",\"IL\",\"RI\",\"NY\",\"WA\",\"CT\",\"KY\",\"TN\",\"HI\",\"MN\",\"AL\",\"MO\",\"IN\",\"SC\",\"ND\",\"MD\",\"UT\",\"WV\",\"NH\",\"NV\",\"NE\",\"DC\",\"AK\",\"KS\",\"LA\",\"DE\",\"ME\",\"WY\",\"OK\",\"ID\",\"MT\",\"VT\",\"SD\",\"PR\",\"GU\",\"MP\",\"VI\"],\"name\":\"\",\"z\":[68836,27656,5802,868,17057,15801,14304,101471,2773,612,4092,20121,13950,14540,2059,5048,8579,10641,19165,24817,1438,39222,30951,5801,2042,5714,263,6286,1487,5728,4729,2442,330,7005,3004,357,1338,1145,1566,2327,110,1940,1442,2132,337,127,1303,774,197,245,272,69,456,39,40],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Applications by Worksite State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f72ce656-b046-4fbb-8ad0-34b56e75fa34');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["plotmap2('EMPLOYER_STATE','Applications by Employer State')\n","plotmap2('WORKSITE_STATE','Applications by Worksite State')"]},{"cell_type":"markdown","metadata":{"id":"r-w1mJAk7COT"},"source":["## Time Taken  (Number of days)"]},{"cell_type":"markdown","metadata":{"id":"eV-BddeU4Jec"},"source":["### SETUP"]},{"cell_type":"markdown","metadata":{"id":"IDrX9nrv-ua5"},"source":["Split the dataset into smaller dataset to be able to more closely visualize the data.\n","\n","*aside:*\n","\n","case_status can be = \n","1. Certified - Withdrawn\n","2. Certified\n","3. Withdrawn\n","4. Denied"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1670462875050,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"qqk4t3p54Xpj","outputId":"571d038e-04cc-498f-c988-ed8c9a8e2381"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       RECEIVED_DATE DECISION_DATE  DAYS\n","510942    2022-06-30    2022-06-30     0\n","210142    2022-02-22    2022-02-22     0\n","30657     2021-10-06    2021-10-06     0\n","100205    2021-12-02    2021-12-02     0\n","121645    2021-12-18    2021-12-18     0\n","...              ...           ...   ...\n","47        2019-10-08    2022-06-24   990\n","23        2019-10-03    2022-06-21   992\n","5         2019-10-02    2022-06-27   999\n","18        2019-10-03    2022-06-28   999\n","16        2019-10-03    2022-06-30  1001\n","\n","[510943 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-effd27b4-d774-446e-bf79-c8c5965d7136\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RECEIVED_DATE</th>\n","      <th>DECISION_DATE</th>\n","      <th>DAYS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>510942</th>\n","      <td>2022-06-30</td>\n","      <td>2022-06-30</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>210142</th>\n","      <td>2022-02-22</td>\n","      <td>2022-02-22</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>30657</th>\n","      <td>2021-10-06</td>\n","      <td>2021-10-06</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>100205</th>\n","      <td>2021-12-02</td>\n","      <td>2021-12-02</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>121645</th>\n","      <td>2021-12-18</td>\n","      <td>2021-12-18</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>2019-10-08</td>\n","      <td>2022-06-24</td>\n","      <td>990</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>2019-10-03</td>\n","      <td>2022-06-21</td>\n","      <td>992</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2019-10-02</td>\n","      <td>2022-06-27</td>\n","      <td>999</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>2019-10-03</td>\n","      <td>2022-06-28</td>\n","      <td>999</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>2019-10-03</td>\n","      <td>2022-06-30</td>\n","      <td>1001</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>510943 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-effd27b4-d774-446e-bf79-c8c5965d7136')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-effd27b4-d774-446e-bf79-c8c5965d7136 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-effd27b4-d774-446e-bf79-c8c5965d7136');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":143}],"source":["dfDays = pd.DataFrame(columns=['RECEIVED_DATE', 'DECISION_DATE', 'DAYS'])\n","dfDays['DECISION_DATE'] = data1['DECISION_DATE']\n","dfDays['RECEIVED_DATE'] = data1['RECEIVED_DATE']\n","dfDays['DAYS'] = (dfDays['DECISION_DATE'] - dfDays['RECEIVED_DATE']).dt.days\n","\n","dfDays.sort_values('DAYS')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1670462875050,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"oRcYY7hQo0EO","outputId":"85499153-1ddb-467a-e940-7945a934ca1e"},"outputs":[{"output_type":"stream","name":"stdout","text":["     NUMBER_OF_DAYS  COUNTS\n","0                 0    4464\n","1                 1    2121\n","2                 2    1363\n","3                 3     926\n","4                 4    1101\n","..              ...     ...\n","961             988       1\n","962             990       1\n","963             992       1\n","964             999       2\n","965            1001       1\n","\n","[966 rows x 2 columns]\n"]}],"source":["dfDaysCounts = dfDays['DAYS'].value_counts().sort_index().rename_axis('NUMBER_OF_DAYS').reset_index(name='COUNTS')\n","print(dfDaysCounts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MLa0NMWnBpJc"},"outputs":[],"source":["dfDays0_14 = dfDays[dfDays['DAYS'] <= 14]\n","dfDays0_14 = dfDays0_14[dfDays0_14['DAYS'] > 0]\n","\n","dfDays15_200 = dfDays[dfDays['DAYS'] <= 200]\n","dfDays15_200 = dfDays15_200[dfDays15_200['DAYS'] > 14]\n","\n","dfDaysLess3 = dfDays[dfDays['DAYS'] <= 3]\n","\n","dfDays4_8 = dfDays[dfDays['DAYS'] <= 8]\n","dfDays4_8 = dfDays4_8[dfDays4_8['DAYS'] > 3]\n","\n","dfDays9_14 = dfDays[dfDays['DAYS'] <= 14]\n","dfDays9_14 = dfDays9_14[dfDays9_14['DAYS'] > 8]\n","\n","dfDays15_31 = dfDays[dfDays['DAYS'] <= 31]\n","dfDays15_31 = dfDays15_31[dfDays15_31['DAYS'] > 14]\n","\n","dfDays32_50 = dfDays[dfDays['DAYS'] <= 50]\n","dfDays32_50 = dfDays32_50[dfDays32_50['DAYS'] > 31]\n","\n","dfDays51_70 = dfDays[dfDays['DAYS'] <= 70]\n","dfDays51_70 = dfDays51_70[dfDays51_70['DAYS'] > 50]\n","\n","dfDays71_90 = dfDays[dfDays['DAYS'] <= 90]\n","dfDays71_90 = dfDays71_90[dfDays71_90['DAYS'] > 70]\n","\n","dfDays91_110 = dfDays[dfDays['DAYS'] <= 110]\n","dfDays91_110 = dfDays91_110[dfDays91_110['DAYS'] > 90]\n","\n","dfDays111_130 = dfDays[dfDays['DAYS'] <= 130]\n","dfDays111_130 = dfDays111_130[dfDays111_130['DAYS'] > 110]\n","\n","dfDays131_150 = dfDays[dfDays['DAYS'] <= 150]\n","dfDays131_150 = dfDays131_150[dfDays131_150['DAYS'] > 130]\n","\n","dfDays151_170 = dfDays[dfDays['DAYS'] <= 170]\n","dfDays151_170 = dfDays151_170[dfDays151_170['DAYS'] > 150]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1670462875051,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"gMCEvD3QyBb4","outputId":"8b4e4070-0f65-4102-86b2-237b3513563b"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"59819b62-f47e-4c97-9547-59ada1abc33a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"59819b62-f47e-4c97-9547-59ada1abc33a\")) {                    Plotly.newPlot(                        \"59819b62-f47e-4c97-9547-59ada1abc33a\",                        [{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,892,893,894,895,896,897,898,899,902,903,904,906,907,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,937,938,939,942,943,944,945,946,947,948,949,951,952,955,956,957,958,961,964,965,968,970,971,974,976,977,978,980,983,984,988,990,992,999,1001],\"y\":[4464,2121,1363,926,1101,5880,6270,367150,78001,1631,17855,1386,202,251,262,189,134,154,119,133,146,177,160,125,94,98,108,108,162,116,81,65,61,84,99,112,91,67,61,66,68,81,103,98,49,46,53,49,78,86,74,54,45,47,58,62,53,59,38,42,30,35,56,51,46,41,36,40,32,47,46,34,32,29,33,39,48,44,48,36,27,35,26,38,49,34,32,19,28,30,43,32,39,24,24,22,17,29,38,30,22,14,31,30,32,38,27,27,22,27,37,41,73,101,34,86,27,32,45,50,44,28,41,21,26,84,63,41,41,52,60,51,35,70,51,58,48,47,46,103,70,48,41,151,60,32,30,36,31,15,23,17,57,42,209,34,18,22,42,40,52,100,35,48,97,139,47,20,28,36,24,27,25,20,32,35,27,16,24,19,17,25,36,30,22,20,20,18,25,30,30,9,22,27,18,32,29,22,30,23,19,23,27,27,23,27,17,16,26,29,28,16,22,19,24,22,26,32,25,23,21,27,31,23,39,32,12,13,23,16,32,50,31,25,31,21,23,32,40,37,35,18,15,25,43,41,19,11,12,22,20,24,38,19,19,30,13,20,35,38,36,15,30,12,30,34,35,35,15,23,21,32,40,41,34,27,21,32,22,22,36,36,20,21,24,20,26,24,31,17,20,21,22,29,36,35,19,25,24,24,23,30,27,13,18,20,25,32,31,34,10,15,23,23,35,37,33,22,17,19,15,28,43,24,19,18,24,17,30,37,27,12,14,21,26,22,28,25,18,23,25,15,29,27,23,14,14,15,30,23,33,22,21,22,12,22,24,37,26,19,17,10,17,20,44,30,24,27,21,29,29,39,27,38,16,43,11,33,37,31,56,17,19,22,31,27,20,22,18,20,23,27,25,49,17,16,22,15,29,26,27,19,16,14,21,20,27,20,15,26,9,24,20,29,19,17,18,21,16,20,27,10,17,18,17,12,21,26,20,9,17,17,15,23,28,23,10,12,17,14,18,18,16,7,17,17,15,13,19,15,8,16,15,14,19,20,16,14,14,8,16,19,21,19,10,14,10,13,21,30,23,8,11,12,17,19,24,17,9,11,14,19,21,16,17,17,9,12,19,24,18,30,10,11,10,11,19,16,26,15,13,13,16,22,24,23,21,11,12,10,22,22,12,8,12,15,18,12,31,14,12,12,5,18,17,22,18,14,14,17,17,23,16,22,23,19,6,11,19,17,11,12,13,11,12,14,23,15,15,9,19,17,23,22,15,13,8,15,21,18,23,15,19,15,19,19,18,17,21,11,8,15,22,18,24,20,14,14,17,22,26,24,33,15,15,11,20,21,31,13,13,14,19,17,21,23,20,12,14,16,16,27,31,14,13,10,23,18,23,18,20,19,11,11,16,19,23,17,17,11,16,12,17,31,27,15,19,12,12,20,20,18,15,16,17,13,23,19,27,13,12,14,17,18,18,21,17,15,15,22,18,32,25,12,14,12,30,22,17,22,14,11,7,11,18,20,16,10,12,12,16,25,28,27,16,12,12,23,13,23,45,22,16,17,14,20,22,31,12,15,18,25,16,23,15,20,16,18,16,21,26,17,15,19,17,15,32,25,27,15,11,15,20,14,24,18,14,15,16,16,14,19,17,24,13,16,16,16,21,15,10,8,9,18,18,23,26,11,15,12,6,15,17,27,14,11,6,9,17,25,10,15,15,15,13,26,13,12,10,14,9,16,16,15,20,9,8,9,8,15,16,7,3,5,6,10,15,12,8,16,8,9,13,10,14,14,11,8,16,6,11,17,15,7,4,4,15,7,14,12,7,6,10,9,10,16,12,9,5,12,4,12,12,11,6,8,3,7,10,10,13,8,4,7,9,14,11,7,3,6,9,7,3,8,7,4,7,6,5,8,9,5,5,7,6,5,9,6,7,3,13,6,7,9,5,10,2,7,4,4,4,5,6,5,3,4,1,6,6,1,6,7,5,6,11,7,3,4,8,4,1,5,6,5,3,2,2,4,5,3,6,5,4,4,1,3,3,1,2,2,3,2,2,2,1,2,3,2,2,3,3,4,3,3,2,1,4,1,5,3,3,2,4,1,1,2,2,5,1,1,3,3,4,4,4,1,1,1,3,2,2,2,4,1,2,1,3,4,1,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,1],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"rangeslider\":{\"visible\":true},\"rangeselector\":{\"buttons\":[{\"count\":1,\"step\":\"day\",\"stepmode\":\"backward\"}]}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('59819b62-f47e-4c97-9547-59ada1abc33a');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}],"source":["import plotly.graph_objects as px\n","import plotly.express as go\n","\n","x = dfDaysCounts['NUMBER_OF_DAYS']\n","y = dfDaysCounts['COUNTS']\n","  \n","plot = px.Figure(data=[px.Scatter(x=x,y=y)])\n","  \n","plot.update_layout(\n","    xaxis=dict(\n","        rangeselector=dict(\n","            buttons=list([\n","                dict(count=1,\n","                     step=\"day\",\n","                     stepmode=\"backward\"),\n","            ])\n","        ),\n","        rangeslider=dict(\n","            visible=True\n","        ),\n","    )\n",")\n","  \n","plot.show()"]},{"cell_type":"markdown","metadata":{"id":"RROF7r3-4T1_"},"source":["### Old code"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lvCWRVlYtGBF"},"outputs":[],"source":["\n","# # Create figure\n","# fig = go.Figure()\n","\n","# fig.add_trace(\n","#     go.Scatter(x=list(dfDaysCounts.NUMBER_OF_DAYS), y=list(dfDaysCounts.COUNTS)))\n","\n","# # Set title\n","# fig.update_layout(\n","#     title_text=\"Time series with range slider and selectors\"\n","# )\n","\n","# # Add range slider\n","# fig.update_layout(\n","#     xaxis=dict(\n","#         rangeselector=dict(\n","#             buttons=list([\n","#                 dict(count=1,\n","#                      label=\"1m\",\n","#                      step=\"month\",\n","#                      stepmode=\"backward\"),\n","#                 dict(count=6,\n","#                      label=\"6m\",\n","#                      step=\"month\",\n","#                      stepmode=\"backward\"),\n","#                 dict(count=1,\n","#                      label=\"YTD\",\n","#                      step=\"year\",\n","#                      stepmode=\"todate\"),\n","#                 dict(count=1,\n","#                      label=\"1y\",\n","#                      step=\"year\",\n","#                      stepmode=\"backward\"),\n","#                 dict(step=\"all\")\n","#             ])\n","#         ),\n","#         rangeslider=dict(\n","#             visible=True\n","#         ),\n","#         type=\"date\"\n","#     )\n","# )\n","\n","# fig.show()\n"]},{"cell_type":"markdown","metadata":{"id":"7MUQoklf3otF"},"source":["### Number of Results per day within 2 weeks"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"elapsed":792,"status":"ok","timestamp":1670462875828,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"YAoakgoI2Q-e","outputId":"4108ee13-b3c9-4186-f993-424e76bcaf79"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["'''\n","This plots how many people per day get their results within two weeks\n","''' \n","%matplotlib inline\n","ax = dfDays0_14['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 0, 14\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"URzFDwSW3yj5"},"source":["### Number of Results per day past 2 weeks"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":274},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1670462875829,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"cPgzgyXvvGH7","outputId":"71f09a08-f566-4723-f487-4f5b44df1b54"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["'''\n","This plots how many people per day get their results past two weeks\n","''' \n","%matplotlib inline\n","ax = dfDays15_200['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 15, 200\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 10))\n","ax.set_xticklabels(np.arange(start, end + 1, 10))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"1l7oUVhz3gUx"},"source":["## Granular Results per day Plots"]},{"cell_type":"markdown","metadata":{"id":"ABhjeU7xIOm-"},"source":["### $\\mbox{DAYS} \\leq 3$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":857,"status":"ok","timestamp":1670462876675,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"fX1_N_stISXl","outputId":"e8238c85-4cc4-4acd-b8fd-6233bf163c1a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDaysLess3['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 0, 3\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"uXf_-3B0I8Q3"},"source":["### $3 < \\mbox{DAYS} \\leq 8$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1670462876676,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"BhQpD_uY7Jg-","outputId":"ddb7c28b-1680-4533-8fd2-d8b72224ec97"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYkAAAD1CAYAAAClSgmzAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAU30lEQVR4nO3dbaxd1X3n8e8vdkhp0wQT7iCCnTFq3HacTOMkHvAofZFCawyRajoiKYwUrMiNO4rRtJpqFJKORPOARF60qGgSJFo8mCgTQmgi3MYZ1wKmVaXh4SZxAEMy3BIy2EPgFvOQNhNSyH9enGX54Jx178UP59zg70faOvv819prr3OA8/PZex2TqkKSpFFeNekJSJIWL0NCktRlSEiSugwJSVKXISFJ6jIkJEldSyc9gWPttNNOq5UrV056GpL0U+VrX/vaP1TV1OH1V1xIrFy5kunp6UlPQ5J+qiT57qi6l5skSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6nrF/ZhO0vG38oqvTHoKPHr1eyY9hROC3yQkSV2GhCSpy5CQJHUZEpKkLkNCktQ1b0gk+Zkk9yT5ZpK9ST7W6jcm+U6SPW1b0+pJcm2SmST3JXnH0Fibkjzctk1D9Xcmub8dc22StPqpSXa3/ruTLDv2b4EkqWch3ySeB86tqrcBa4ANSda1tv9cVWvatqfVLgBWtW0LcB0MPvCBK4FzgLOBK4c+9K8DPjh03IZWvwK4vapWAbe355KkMZk3JGrgH9vTV7et5jhkI3BTO+4u4JQkZwDnA7ur6kBVPQ3sZhA4ZwCvq6q7qqqAm4CLhsba3va3D9UlSWOwoHsSSZYk2QM8yeCD/u7WdFW7pHRNkte02pnAY0OH72u1uer7RtQBTq+qx9v+94DTF/ayJEnHwoJCoqperKo1wHLg7CRvBT4C/DLwb4BTgQ8ft1kO5lB0vsEk2ZJkOsn07Ozs8ZyGJJ1QXtbqpqp6BrgT2FBVj7dLSs8D/43BfQaA/cCKocOWt9pc9eUj6gBPtMtRtMcnO/O6vqrWVtXaqamf+P94S5KO0EJWN00lOaXtnwz8BvCtoQ/vMLhX8EA7ZAdwWVvltA54tl0y2gWsT7Ks3bBeD+xqbc8lWdfGugy4bWisg6ugNg3VJUljsJC/4O8MYHuSJQxC5Zaq+qskdySZAgLsAf5D678TuBCYAX4AfACgqg4k+QRwb+v38ao60PY/BNwInAx8tW0AVwO3JNkMfBd435G+UEnSyzdvSFTVfcDbR9TP7fQvYGunbRuwbUR9GnjriPpTwHnzzVGSdHz4i2tJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXfOGRJKfSXJPkm8m2ZvkY61+VpK7k8wk+UKSk1r9Ne35TGtfOTTWR1r920nOH6pvaLWZJFcM1UeeQ5I0Hgv5JvE8cG5VvQ1YA2xIsg74FHBNVb0ZeBrY3PpvBp5u9WtaP5KsBi4B3gJsAD6TZEmSJcCngQuA1cClrS9znEOSNAbzhkQN/GN7+uq2FXAucGurbwcuavsb23Na+3lJ0uo3V9XzVfUdYAY4u20zVfVIVf0IuBnY2I7pnUOSNAYLuifR/sS/B3gS2A38PfBMVb3QuuwDzmz7ZwKPAbT2Z4E3DNcPO6ZXf8Mc55AkjcGCQqKqXqyqNcByBn/y/+XjOquXKcmWJNNJpmdnZyc9HUl6xXhZq5uq6hngTuDfAqckWdqalgP72/5+YAVAa3898NRw/bBjevWn5jjH4fO6vqrWVtXaqampl/OSJElzWMjqpqkkp7T9k4HfAB5iEBYXt26bgNva/o72nNZ+R1VVq1/SVj+dBawC7gHuBVa1lUwnMbi5vaMd0zuHJGkMls7fhTOA7W0V0quAW6rqr5I8CNyc5JPAN4AbWv8bgM8mmQEOMPjQp6r2JrkFeBB4AdhaVS8CJLkc2AUsAbZV1d421oc755AkjcG8IVFV9wFvH1F/hMH9icPrPwTe2xnrKuCqEfWdwM6FnkOSNB7+4lqS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeqaNySSrEhyZ5IHk+xN8nut/kdJ9ifZ07YLh475SJKZJN9Ocv5QfUOrzSS5Yqh+VpK7W/0LSU5q9de05zOtfeWxfPGSpLkt5JvEC8AfVNVqYB2wNcnq1nZNVa1p206A1nYJ8BZgA/CZJEuSLAE+DVwArAYuHRrnU22sNwNPA5tbfTPwdKtf0/pJksZk3pCoqser6utt//vAQ8CZcxyyEbi5qp6vqu8AM8DZbZupqkeq6kfAzcDGJAHOBW5tx28HLhoaa3vbvxU4r/WXJI3By7on0S73vB24u5UuT3Jfkm1JlrXamcBjQ4fta7Ve/Q3AM1X1wmH1l4zV2p9t/Q+f15Yk00mmZ2dnX85LkiTNYcEhkeS1wF8Av19VzwHXAb8ArAEeB/74uMxwAarq+qpaW1Vrp6amJjUNSXrFWVBIJHk1g4D4XFV9CaCqnqiqF6vqx8CfMbicBLAfWDF0+PJW69WfAk5JsvSw+kvGau2vb/0lSWOwkNVNAW4AHqqqPxmqnzHU7beAB9r+DuCStjLpLGAVcA9wL7CqrWQ6icHN7R1VVcCdwMXt+E3AbUNjbWr7FwN3tP6SpDFYOn8X3gW8H7g/yZ5W+yiD1UlrgAIeBX4XoKr2JrkFeJDByqitVfUiQJLLgV3AEmBbVe1t430YuDnJJ4FvMAgl2uNnk8wABxgEiyRpTOYNiar6O2DUiqKdcxxzFXDViPrOUcdV1SMculw1XP8h8N755ihJOj78xbUkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkrnlDIsmKJHcmeTDJ3iS/1+qnJtmd5OH2uKzVk+TaJDNJ7kvyjqGxNrX+DyfZNFR/Z5L72zHXJslc55AkjcdCvkm8APxBVa0G1gFbk6wGrgBur6pVwO3tOcAFwKq2bQGug8EHPnAlcA5wNnDl0If+dcAHh47b0Oq9c0iSxmDekKiqx6vq623/+8BDwJnARmB767YduKjtbwRuqoG7gFOSnAGcD+yuqgNV9TSwG9jQ2l5XVXdVVQE3HTbWqHNIksbgZd2TSLISeDtwN3B6VT3emr4HnN72zwQeGzpsX6vNVd83os4c55AkjcGCQyLJa4G/AH6/qp4bbmvfAOoYz+0l5jpHki1JppNMz87OHs9pSNIJZUEhkeTVDALic1X1pVZ+ol0qoj0+2er7gRVDhy9vtbnqy0fU5zrHS1TV9VW1tqrWTk1NLeQlSZIWYCGrmwLcADxUVX8y1LQDOLhCaRNw21D9srbKaR3wbLtktAtYn2RZu2G9HtjV2p5Lsq6d67LDxhp1DknSGCxdQJ93Ae8H7k+yp9U+ClwN3JJkM/Bd4H2tbSdwITAD/AD4AEBVHUjyCeDe1u/jVXWg7X8IuBE4Gfhq25jjHJKkMZg3JKrq74B0ms8b0b+ArZ2xtgHbRtSngbeOqD816hySpPHwF9eSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSuuYNiSTbkjyZ5IGh2h8l2Z9kT9suHGr7SJKZJN9Ocv5QfUOrzSS5Yqh+VpK7W/0LSU5q9de05zOtfeWxetGSpIVZyDeJG4ENI+rXVNWatu0ESLIauAR4SzvmM0mWJFkCfBq4AFgNXNr6AnyqjfVm4Glgc6tvBp5u9WtaP0nSGM0bElX1t8CBBY63Ebi5qp6vqu8AM8DZbZupqkeq6kfAzcDGJAHOBW5tx28HLhoaa3vbvxU4r/WXJI3J0dyTuDzJfe1y1LJWOxN4bKjPvlbr1d8APFNVLxxWf8lYrf3Z1l+SNCZHGhLXAb8ArAEeB/74mM3oCCTZkmQ6yfTs7OwkpyJJryhHFBJV9URVvVhVPwb+jMHlJID9wIqhrstbrVd/CjglydLD6i8Zq7W/vvUfNZ/rq2ptVa2dmpo6kpckSRrhiEIiyRlDT38LOLjyaQdwSVuZdBawCrgHuBdY1VYyncTg5vaOqirgTuDidvwm4LahsTa1/YuBO1p/SdKYLJ2vQ5LPA+8GTkuyD7gSeHeSNUABjwK/C1BVe5PcAjwIvABsraoX2ziXA7uAJcC2qtrbTvFh4OYknwS+AdzQ6jcAn00yw+DG+SVH/WolSS/LvCFRVZeOKN8wonaw/1XAVSPqO4GdI+qPcOhy1XD9h8B755ufJOn48RfXkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkrrmDYkk25I8meSBodqpSXYnebg9Lmv1JLk2yUyS+5K8Y+iYTa3/w0k2DdXfmeT+dsy1STLXOSRJ47OQbxI3AhsOq10B3F5Vq4Db23OAC4BVbdsCXAeDD3zgSuAc4GzgyqEP/euADw4dt2Gec0iSxmTekKiqvwUOHFbeCGxv+9uBi4bqN9XAXcApSc4Azgd2V9WBqnoa2A1saG2vq6q7qqqAmw4ba9Q5JEljcqT3JE6vqsfb/veA09v+mcBjQ/32tdpc9X0j6nOdQ5I0Jkd947p9A6hjMJcjPkeSLUmmk0zPzs4ez6lI0gnlSEPiiXapiPb4ZKvvB1YM9VveanPVl4+oz3WOn1BV11fV2qpaOzU1dYQvSZJ0uCMNiR3AwRVKm4DbhuqXtVVO64Bn2yWjXcD6JMvaDev1wK7W9lySdW1V02WHjTXqHJKkMVk6X4cknwfeDZyWZB+DVUpXA7ck2Qx8F3hf674TuBCYAX4AfACgqg4k+QRwb+v38ao6eDP8QwxWUJ0MfLVtzHEOSdKYzBsSVXVpp+m8EX0L2NoZZxuwbUR9GnjriPpTo84hSRoff3EtSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK65v2dhCSpb+UVX5n0FHj06vcct7H9JiFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnrqEIiyaNJ7k+yJ8l0q52aZHeSh9vjslZPkmuTzCS5L8k7hsbZ1Po/nGTTUP2dbfyZdmyOZr6SpJfnWHyT+LWqWlNVa9vzK4Dbq2oVcHt7DnABsKptW4DrYBAqwJXAOcDZwJUHg6X1+eDQcRuOwXwlSQt0PC43bQS2t/3twEVD9Ztq4C7glCRnAOcDu6vqQFU9DewGNrS211XVXVVVwE1DY0mSxuBoQ6KAv07ytSRbWu30qnq87X8POL3tnwk8NnTsvlabq75vRF2SNCZH+/+T+NWq2p/kXwC7k3xruLGqKkkd5Tnm1QJqC8Cb3vSm4306STphHNU3iara3x6fBL7M4J7CE+1SEe3xydZ9P7Bi6PDlrTZXffmI+qh5XF9Va6tq7dTU1NG8JEnSkCMOiSQ/l+TnD+4D64EHgB3AwRVKm4Db2v4O4LK2ymkd8Gy7LLULWJ9kWbthvR7Y1dqeS7KurWq6bGgsSdIYHM3lptOBL7dVqUuB/15V/yPJvcAtSTYD3wXe1/rvBC4EZoAfAB8AqKoDST4B3Nv6fbyqDrT9DwE3AicDX22bJGlMjjgkquoR4G0j6k8B542oF7C1M9Y2YNuI+jTw1iOdoyTp6PiLa0lSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqWvppCcwnyQbgD8FlgB/XlVXT3hKJ5SVV3xl0lPg0avfM+kpAL4XOjEt6m8SSZYAnwYuAFYDlyZZPdlZSdKJY1GHBHA2MFNVj1TVj4CbgY0TnpMknTBSVZOeQ1eSi4ENVfU77fn7gXOq6vLD+m0BtrSnvwR8e6wT/UmnAf8w4TksFr4Xh/heHOJ7cchieS/+ZVVNHV5c9PckFqKqrgeun/Q8DkoyXVVrJz2PxcD34hDfi0N8Lw5Z7O/FYr/ctB9YMfR8eatJksZgsYfEvcCqJGclOQm4BNgx4TlJ0gljUV9uqqoXklwO7GKwBHZbVe2d8LQWYtFc+loEfC8O8b04xPfikEX9XizqG9eSpMla7JebJEkTZEhIkroMCUlSlyFxHCS5adJzWAyS/GqS/5Rk/aTnMm5JzknyurZ/cpKPJfnLJJ9K8vpJz2+ckvzHJCvm7/nKl+SkJJcl+fX2/N8n+a9JtiZ59aTnN4o3ro9SksOX5Ab4NeAOgKr6zbFPakKS3FNVZ7f9DwJbgS8D64G/PJH+csYke4G3tRV61wM/AG4Fzmv1fzfRCY5RkmeBfwL+Hvg88MWqmp3srCYjyecYrCr9WeAZ4LXAlxj8e5Gq2jTB6Y1kSBylJF8HHgT+HCgGIfF5Br/poKr+ZnKzG68k36iqt7f9e4ELq2o2yc8Bd1XVv57sDMcnyUNV9a/a/ter6h1DbXuqas3kZjdeSb4BvBP4deC3gd8Evsbgv5MvVdX3Jzi9sUpyX1X9SpKlDH4Y/MaqejFJgG9W1a9MeIo/wctNR28tg3/h/xB4tqr+J/D/qupvTqSAaF6VZFmSNzD4A8gsQFX9E/DCZKc2dg8k+UDb/2aStQBJfhH458lNayKqqn5cVX9dVZuBNwKfATYAj0x2amP3qvbD4J9n8G3i4KXH1wCL8nLTov4x3U+DqvoxcE2SL7bHJzhx39fXMwjMAJXkjKp6PMlrW+1E8jvAnyb5Lwz+8rb/leQx4LHWdiJ5yT/7qvpnBn9zwo4kPzuZKU3MDcC3GPw4+A+BLyZ5BFjH4G+5XnS83HSMJXkP8K6q+uik57JYtA+C06vqO5Oey7i1m9dnMfiDw76qemLCUxq7JL9YVf970vNYLJK8EaCq/m+SUxhchvs/VXXPZGc2miEhSerynoQkqcuQkCR1GRKSpC5DQpLUZUhIkrr+P9jwx0uxVDk7AAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays4_8['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 4, 8\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"FYOHwF9YJUl4"},"source":["### $ 8 < \\mbox{DAYS} \\leq 14$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1670462876677,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"Wpqvowg8IC9q","outputId":"526f1920-b669-4ecf-cf40-f875a92e8c29"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays9_14['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 9, 14\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"4OqbunmBJiO0"},"source":["### $14 < \\mbox{DAYS} \\leq 31$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1670462876678,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"38l4HdRuJl_c","outputId":"062213b3-2e39-49ac-e1e0-bee9b62b3b66"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays15_31['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 15, 31\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mdyHo6QSKFAE"},"source":["### $31 < \\mbox{DAYS} \\leq 50$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1670462876678,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"PGLYEBxmKS1P","outputId":"89858646-1214-40be-db85-bbce6e0ec784"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays32_50['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 32, 50\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"o8eZITTaMfDd"},"source":["### $50 < \\mbox{DAYS} \\leq 70$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1670462876679,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"EIJ-ofU-MisR","outputId":"1360eea1-0337-447b-8c8f-06d124f5623d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays51_70['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 51, 70\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"SNRJK3-yOfp9"},"source":["### $70 < \\mbox{DAYS} \\leq 90$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":669,"status":"ok","timestamp":1670462877320,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"D_PJv4vYOgP-","outputId":"bc60691b-8138-472c-b1da-f947ca270223"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays71_90['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 71, 90\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"gCJeVDfHQWsn"},"source":["### $90 < \\mbox{DAYS} \\leq 110$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1670462877321,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"cLrgFDENQWT3","outputId":"13af13a9-bee6-4b4f-ded8-415079ab3585"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays91_110['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 91, 110\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"eYnipl1rj-zu"},"source":["### $110 < \\mbox{DAYS} \\leq 130$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":692,"status":"ok","timestamp":1670462878003,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"jnWKl-LOkB_I","outputId":"46b381da-f6b0-4c42-e3ae-3adfb6a6fe98"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays111_130['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 111, 130\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"CmBr85Ylk5CE"},"source":["### $130 < \\mbox{DAYS} \\leq 150$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1670462878004,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"K_NAUzaSk1v4","outputId":"227b2c8f-75d3-4cd0-d658-6e7de6f688fe"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays131_150['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 131, 150\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"_9zKI6ubk_r0"},"source":["### $150 < \\mbox{DAYS} \\leq 170$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1670462878004,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"Taa2VbyXlM1v","outputId":"cd30934e-6c92-469d-a0eb-4dad085e58bd"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","ax = dfDays151_170['DAYS'].value_counts().sort_index().plot(kind='bar')\n","start, end = 151, 170\n","ax.xaxis.set_ticks(np.arange(0, end - start + 1, 1))\n","ax.set_xticklabels(np.arange(start, end + 1, 1))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"oMj8N8qFAixn"},"source":["## Acceptance Rate By State"]},{"cell_type":"markdown","metadata":{"id":"_l3Um0454otn"},"source":["### Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1670462878005,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"O6H9-RX_AmvI","outputId":"b3742c64-b31d-4dc8-b117-fda448ee2a2d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      WORKSITE_WORKERS\n","WORKSITE_STATE CASE_STATUS                            \n","AK             Certified                            91\n","               Certified - Withdrawn                11\n","               Denied                                7\n","               Withdrawn                             2\n","AL             Certified                          1614\n","               Certified - Withdrawn               156\n","               Denied                               22\n","               Withdrawn                            67"],"text/html":["\n","  <div id=\"df-883dc0ff-d622-44ac-847f-62ebe0394826\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>WORKSITE_WORKERS</th>\n","    </tr>\n","    <tr>\n","      <th>WORKSITE_STATE</th>\n","      <th>CASE_STATUS</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">AK</th>\n","      <th>Certified</th>\n","      <td>91</td>\n","    </tr>\n","    <tr>\n","      <th>Certified - Withdrawn</th>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>Denied</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>Withdrawn</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">AL</th>\n","      <th>Certified</th>\n","      <td>1614</td>\n","    </tr>\n","    <tr>\n","      <th>Certified - Withdrawn</th>\n","      <td>156</td>\n","    </tr>\n","    <tr>\n","      <th>Denied</th>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>Withdrawn</th>\n","      <td>67</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-883dc0ff-d622-44ac-847f-62ebe0394826')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-883dc0ff-d622-44ac-847f-62ebe0394826 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-883dc0ff-d622-44ac-847f-62ebe0394826');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":161}],"source":["data_state = data_viz.groupby(['WORKSITE_STATE', 'CASE_STATUS']).sum()\n","# data_state.to_csv('state.csv')\n","data_state.head(8)"]},{"cell_type":"markdown","metadata":{"id":"vC-gqRmSQeYW"},"source":["### Helper functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JcmiXnUjOtyO"},"outputs":[],"source":["# Need to reimport for some reason\n","import plotly.express as px"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zmqR8uwyQqMp"},"outputs":[],"source":["def plotPerc(curData, title, col='Count'):\n","    \n","    fig = px.choropleth(curData,\n","                      locations=\"STATE\", \n","                      locationmode=\"USA-states\", \n","                      scope=\"usa\",\n","                      color=col,\n","                      color_continuous_scale=\"Viridis_r\"\n","                      )\n","\n","\n","    fig.update_layout(\n","            title_text = title,\n","            title_font_family=\"Times New Roman\",\n","            title_font_size = 22,\n","            title_font_color=\"black\", \n","            title_x=0.45,\n","            showlegend=False \n","            )\n","    fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TQUW3A50Qd1c"},"outputs":[],"source":["def calcPerc(passed, failed):\n","\n","    def func(x):\n","        certified = 0\n","        denied = 0\n","        for key in passed:\n","            try:\n","                certified += data_state.loc[x.name, key].sum()\n","            except:\n","                pass\n","        for key in failed:\n","            try:\n","                denied += data_state.loc[x.name, key].sum()\n","            except:\n","                pass\n","        return certified / (certified + denied)\n","\n","    return func"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":691,"status":"ok","timestamp":1670462878685,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"nZFj_K7RSWXg","outputId":"299aca48-1748-46a4-bfe2-693e75af6e31"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  STATE     Count\n","0    AK  0.935780\n","1    AL  0.987723\n","2    AR  0.993654\n","3    AZ  0.997835\n","4    CA  0.997658"],"text/html":["\n","  <div id=\"df-514edd55-3611-495f-a748-9cb36fef7a02\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATE</th>\n","      <th>Count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AK</td>\n","      <td>0.935780</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AL</td>\n","      <td>0.987723</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AR</td>\n","      <td>0.993654</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AZ</td>\n","      <td>0.997835</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CA</td>\n","      <td>0.997658</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-514edd55-3611-495f-a748-9cb36fef7a02')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-514edd55-3611-495f-a748-9cb36fef7a02 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-514edd55-3611-495f-a748-9cb36fef7a02');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":165}],"source":["data_cert_rate = data_state.groupby(['WORKSITE_STATE']).apply(calcPerc(['Certified','Certified - Withdrawn'], ['Denied']))\n","data_cert_rate = pd.DataFrame({'STATE':data_cert_rate.index, 'Count':data_cert_rate.values})\n","data_cert_rate.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1670462878686,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"efeXvnJzSg0l","outputId":"8f45f42f-eac8-41de-b2a5-5204ed1467f2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  STATE     Count\n","0    AK  0.892157\n","1    AL  0.911864\n","2    AR  0.938797\n","3    AZ  0.974615\n","4    CA  0.975057"],"text/html":["\n","  <div id=\"df-545e7c58-208b-4b28-8129-7c27c40e3154\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>STATE</th>\n","      <th>Count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AK</td>\n","      <td>0.892157</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AL</td>\n","      <td>0.911864</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AR</td>\n","      <td>0.938797</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AZ</td>\n","      <td>0.974615</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CA</td>\n","      <td>0.975057</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-545e7c58-208b-4b28-8129-7c27c40e3154')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-545e7c58-208b-4b28-8129-7c27c40e3154 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-545e7c58-208b-4b28-8129-7c27c40e3154');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":166}],"source":["data_arrival_rate = data_state.groupby(['WORKSITE_STATE']).apply(calcPerc(['Certified'], ['Certified - Withdrawn']))\n","data_arrival_rate = pd.DataFrame({'STATE':data_arrival_rate.index, 'Count':data_arrival_rate.values})\n","data_arrival_rate.head(5)"]},{"cell_type":"markdown","metadata":{"id":"B5c2f_wCQjXc"},"source":["### Visualization"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":559},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1670462878686,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"xbRF4JqoKfuS","outputId":"ac3f583d-ab58-48c3-b7ed-3d4b2420e393"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"9dd80812-d12a-4439-b13a-3a9a50cca96e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9dd80812-d12a-4439-b13a-3a9a50cca96e\")) {                    Plotly.newPlot(                        \"9dd80812-d12a-4439-b13a-3a9a50cca96e\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[0.9357798165137615,0.9877232142857143,0.9936541512427287,0.9978345035763502,0.997657952297507,0.9942974665794148,0.9979506287843503,0.9945973758682789,0.9919966301600674,0.9891458444090023,0.9952665761567534,0.9635535307517085,0.9651162790697675,0.9958368026644463,0.9874429223744292,0.9972841260977715,0.9883165161975571,0.9966442953020134,0.9962462462462462,0.9958281184814352,0.9944798002883162,0.9928092042186002,0.9927360774818402,0.997157982724993,0.9967505114935612,0.9961089494163424,0.8846153846153846,0.9928469241773963,0.9484126984126984,0.9976542269611577,0.972568578553616,0.9955357142857143,0.9938028169014085,0.9970573675815412,0.9909255898366606,0.9795361527967258,0.994488660055476,0.9862866168868466,0.9939792008757526,0.9964714184897672,0.9958078350118055,0.8857142857142857,0.9986049107142857,0.9922680412371134,1.0,0.9955903968642822,0.996606895831702,0.991519082065353,0.9900785656728445,1.0,1.0,0.9992652545778083,0.9971550497866287,0.9892008639308856,0.9865771812080537],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Certification Rate by State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('9dd80812-d12a-4439-b13a-3a9a50cca96e');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["What percentage of applicants are accepted?\n"]}],"source":["'''\n","This plots the percentage of applicants that end up being certified \n","and don't withdraw their application\n","This will be important to the person, since this answers the question of:\n","\"What are my chances of being accepted?\"\n","'''\n","plotPerc(data_cert_rate, 'Certification Rate by State')\n","print(\"What percentage of applicants are accepted?\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":559},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1670462878687,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"UUDs5MPJSoo3","outputId":"0d16959a-bc14-47d1-de0c-e53af046d465"},"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"35dc930a-66eb-4879-8998-f4eb656f365b\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"35dc930a-66eb-4879-8998-f4eb656f365b\")) {                    Plotly.newPlot(                        \"35dc930a-66eb-4879-8998-f4eb656f365b\",                        [{\"coloraxis\":\"coloraxis\",\"geo\":\"geo\",\"hovertemplate\":\"STATE=%{location}<br>Count=%{z}<extra></extra>\",\"locationmode\":\"USA-states\",\"locations\":[\"AK\",\"AL\",\"AR\",\"AZ\",\"CA\",\"CO\",\"CT\",\"DC\",\"DE\",\"FL\",\"GA\",\"GU\",\"HI\",\"IA\",\"ID\",\"IL\",\"IN\",\"KS\",\"KY\",\"LA\",\"MA\",\"MD\",\"ME\",\"MI\",\"MN\",\"MO\",\"MP\",\"MS\",\"MT\",\"NC\",\"ND\",\"NE\",\"NH\",\"NJ\",\"NM\",\"NV\",\"NY\",\"OH\",\"OK\",\"OR\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VA\",\"VI\",\"VT\",\"WA\",\"WI\",\"WV\",\"WY\"],\"name\":\"\",\"z\":[0.8921568627450981,0.911864406779661,0.9387972325705163,0.9746152834407471,0.9750573262292127,0.9674689732982324,0.9677027910015868,0.9746508018623901,0.9639065817409767,0.967304160881444,0.9659710957085975,0.9976359338061466,0.8353413654618473,0.9414715719063546,0.9745664739884393,0.931129266244178,0.9710908113917249,0.9625420875420876,0.9755086661642803,0.974025974025974,0.9468604157827747,0.9240704973442782,0.9170731707317074,0.9138258634179054,0.9550833132093697,0.9220096982758621,1.0,0.8976945244956772,0.9707112970711297,0.9799682423354098,0.8666666666666667,0.9704035874439462,0.9563492063492064,0.9787891325334437,0.9514652014652014,0.9477715877437326,0.9556467049494121,0.9581422435757443,0.9631057268722467,0.9750944287063267,0.9583857543791735,0.9516129032258065,0.9770885722268791,0.9539888682745825,0.9790209790209791,0.9346702755905512,0.9700128329361234,0.9635220125786164,0.9680044763212778,1.0,0.9705882352941176,0.9786996932480095,0.9595383218778368,0.9454148471615721,0.9251700680272109],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"scope\":\"usa\"},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fde725\"],[0.1111111111111111,\"#b5de2b\"],[0.2222222222222222,\"#6ece58\"],[0.3333333333333333,\"#35b779\"],[0.4444444444444444,\"#1f9e89\"],[0.5555555555555556,\"#26828e\"],[0.6666666666666666,\"#31688e\"],[0.7777777777777778,\"#3e4989\"],[0.8888888888888888,\"#482878\"],[1.0,\"#440154\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"title\":{\"font\":{\"family\":\"Times New Roman\",\"size\":22,\"color\":\"black\"},\"text\":\"Application to Arrival Conversion Rate by State\",\"x\":0.45},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('35dc930a-66eb-4879-8998-f4eb656f365b');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["What percentage of applicants that are accepted don't withdraw their applicantation?\n"]}],"source":["'''\n","This plots the percentage of applicants that are certified \n","and don't withdraw their application.\n","This will be important to the state, since this answers the question of:\n","\"If we accept this person, what is the likelyhood they come?\"\n","'''\n","plotPerc(data_arrival_rate, 'Application to Arrival Conversion Rate by State')\n","print(\"What percentage of applicants that are accepted don't withdraw their applicantation?\")"]},{"cell_type":"markdown","metadata":{"id":"bVargOSKNQEa"},"source":["# Benchmarking using Logistic CLASSification\n","\n","In the next cells , we are going to prepare the data and use the Linear and Logistic regression on it to set a benchmark to compare when we apply deep learning on it. "]},{"cell_type":"markdown","metadata":{"id":"iC4TQRgJOCpL"},"source":["## Prepping the data"]},{"cell_type":"markdown","metadata":{"id":"UuCu25kvOKsm"},"source":["### Getting some useful preprocessing functions beforehand"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eBQ8q4wXt_kW"},"outputs":[],"source":["# we will be working on the benchmarking dataframe data_x\n","# FUNCTIONS THAT MIGHT BE USEFUL\n","def modify_label_encoder(x_tr, x_te , lab_col): \n","    for i in lab_col:\n","        le = LabelEncoder()\n","        #print(i, np.unique(x_tr[:, i]))\n","        #print(np.unique(x_te[:, i]))\n","        #print(np.unique(X_q[:,i]))\n","        le.fit(np.concatenate((x_tr[:,i] , x_te[:,i] ) , axis = 0))\n","        x_tr[:,i] = le.transform(x_tr[:,i])\n","        #print('transform 1')\n","        x_te[:,i] = le.transform(x_te[:,i])\n","        #print('transform 2')\n","\n","        \n","\n","def drop_the_columns(x_tr, x_te,  del_col): \n","    adj = 0 \n","    for i in del_col: \n","        x_tr = np.concatenate((x_tr[:, :i-adj] , x_tr[:, i-adj+1:]), axis =1)\n","    \n","\n","def missing_values_fix(x_tr, x_te,   col, strategy):\n","    #maybe leave the parts where consts are used, mainly use only mean or median strategy\n","    for i in col:\n","        print(i)\n","        si = SimpleImputer(strategy = strategy[i])\n","        x_tr[:,i] = si.fit_transform(x_tr[:, i].reshape(-1,1)).reshape(-1,)\n","        x_te[:,i] = si.transform(x_te[:, i].reshape(-1,1)).reshape(-1,)\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1670462878688,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"gR7ZYU4ESLs4","outputId":"64bb6fc2-1c8d-4a15-d331-0c22891932f4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\ni = []\\nfor j in range(len(data_x)): \\n  if data_x.iloc[j, 0] == 'Certified' or data_x.iloc[j, 0] == 'Denied':\\n    i.append(j)\\n\\ndata_new = data_x.iloc[i, :]\\nprint(len(data_new))\\nprint(data_new.head())\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":170}],"source":["# remove the rows with values certified withdrawn or withreawn \n","# TODO - Dushyant. \n","\n","# fidning the rows where the value of data_x[:, 0] is 'C' or 'D'\n","\n","# This cell can be used to filter out unwanted data - we are not doing it becuase it's not needed for now.\n","'''\n","i = []\n","for j in range(len(data_x)): \n","  if data_x.iloc[j, 0] == 'Certified' or data_x.iloc[j, 0] == 'Denied':\n","    i.append(j)\n","\n","data_new = data_x.iloc[i, :]\n","print(len(data_new))\n","print(data_new.head())\n","'''"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1670462878688,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"XQg3pkJmU40L","outputId":"04e735cb-be47-4e91-85d4-211aba63acdd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Certified - Withdrawn'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":171}],"source":["data_x.iloc[1, 0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6151,"status":"ok","timestamp":1670462884812,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"hTQf3BeHOfMG","outputId":"d9cf2c1e-f729-456c-cd0a-99065c3b2abd"},"outputs":[{"output_type":"stream","name":"stdout","text":["  RECEIVED_DATE DECISION_DATE    EMPLOYER_CITY EMPLOYER_STATE WORKSITE_CITY  \\\n","0    2019-10-01    2022-04-20               WI             WI         Plano   \n","1    2019-10-01    2022-04-05  RIDGEFIELD PARK             NJ         Plano   \n","2    2019-10-01    2021-12-01          Hoboken             NJ       Hoboken   \n","3    2019-10-02    2022-03-08        Charlotte             NC        Denver   \n","4    2019-10-02    2021-12-09       Los Alamos             NM    Los Alamos   \n","\n","  WORKSITE_STATE  WORKSITE_WORKERS  \n","0             TX                 1  \n","1             TX                 1  \n","2             NJ                 1  \n","3             CO                 1  \n","4             NM                 1  \n","(510943, 8)\n","(510943,)\n","     EMPLOYER_CITY EMPLOYER_STATE WORKSITE_CITY WORKSITE_STATE  \\\n","0               WI             WI         Plano             TX   \n","1  RIDGEFIELD PARK             NJ         Plano             TX   \n","2          Hoboken             NJ       Hoboken             NJ   \n","3        Charlotte             NC        Denver             CO   \n","4       Los Alamos             NM    Los Alamos             NM   \n","\n","   WORKSITE_WORKERS  r_year  r_month  r_day  \n","0                 1    2019       10      1  \n","1                 1    2019       10      1  \n","2                 1    2019       10      1  \n","3                 1    2019       10      2  \n","4                 1    2019       10      2  \n"]}],"source":["train_data_y = data_x.iloc[:, 0]\n","train_data = data_x.iloc[:, 1:]\n","print(train_data.head())\n","train_data['r_year'] = train_data['RECEIVED_DATE'].map(lambda x: x.year)\n","train_data['r_month'] = train_data['RECEIVED_DATE'].map(lambda x: x.month)\n","train_data['r_day'] = train_data['RECEIVED_DATE'].map(lambda x: x.day)\n","#train_data['d_year'] = train_data['DECISION_DATE'].map(lambda x: x.year)\n","#train_data['d_month'] = train_data['DECISION_DATE'].map(lambda x: x.month)\n","#train_data['d_day'] = train_data['DECISION_DATE'].map(lambda x: x.day)\n","train_data = train_data.drop(columns = ['RECEIVED_DATE', 'DECISION_DATE'])\n","print(train_data.shape)\n","print(train_data_y.shape)\n","print(train_data.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1670462884813,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"-gHTlJNfOxDF","outputId":"d69309be-1ea7-40f1-a9df-4d9dc02947fe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        EMPLOYER_CITY EMPLOYER_STATE   WORKSITE_CITY WORKSITE_STATE  \\\n","432714           Katy             TX            Katy             TX   \n","154799        DUBUQUE             IA         DUBUQUE             IA   \n","432279       San Jose             CA       Baltimore             MD   \n","99317         Seattle             WA         Seattle             WA   \n","214913   PHILADELPHIA             PA    Philadelphia             PA   \n","...               ...            ...             ...            ...   \n","284553  Mountain View             CA        Kirkland             WA   \n","22832   San Francisco             CA  San Francisco              CA   \n","450537      Manasquan             NJ       Manasquan             NJ   \n","500780  Mountain View             CA       Sunnyvale             CA   \n","334684     SCHAUMBURG             IL      Schaumburg             IL   \n","\n","        WORKSITE_WORKERS  r_year  r_month  r_day  \n","432714                 1    2022        5     28  \n","154799                 1    2022        1     18  \n","432279                 1    2022        5     27  \n","99317                  1    2021       12      2  \n","214913                 1    2022        2     24  \n","...                  ...     ...      ...    ...  \n","284553                 1    2022        3     31  \n","22832                  1    2021        9     29  \n","450537                 1    2022        6      6  \n","500780                 1    2022        6     23  \n","334684                 1    2022        4     21  \n","\n","[51094 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-6ba148b5-9d82-4a10-bc9e-c42c735d8362\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>EMPLOYER_CITY</th>\n","      <th>EMPLOYER_STATE</th>\n","      <th>WORKSITE_CITY</th>\n","      <th>WORKSITE_STATE</th>\n","      <th>WORKSITE_WORKERS</th>\n","      <th>r_year</th>\n","      <th>r_month</th>\n","      <th>r_day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>432714</th>\n","      <td>Katy</td>\n","      <td>TX</td>\n","      <td>Katy</td>\n","      <td>TX</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>5</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>154799</th>\n","      <td>DUBUQUE</td>\n","      <td>IA</td>\n","      <td>DUBUQUE</td>\n","      <td>IA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>1</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>432279</th>\n","      <td>San Jose</td>\n","      <td>CA</td>\n","      <td>Baltimore</td>\n","      <td>MD</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>5</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>99317</th>\n","      <td>Seattle</td>\n","      <td>WA</td>\n","      <td>Seattle</td>\n","      <td>WA</td>\n","      <td>1</td>\n","      <td>2021</td>\n","      <td>12</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>214913</th>\n","      <td>PHILADELPHIA</td>\n","      <td>PA</td>\n","      <td>Philadelphia</td>\n","      <td>PA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>2</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>284553</th>\n","      <td>Mountain View</td>\n","      <td>CA</td>\n","      <td>Kirkland</td>\n","      <td>WA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>3</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>22832</th>\n","      <td>San Francisco</td>\n","      <td>CA</td>\n","      <td>San Francisco</td>\n","      <td>CA</td>\n","      <td>1</td>\n","      <td>2021</td>\n","      <td>9</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>450537</th>\n","      <td>Manasquan</td>\n","      <td>NJ</td>\n","      <td>Manasquan</td>\n","      <td>NJ</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>500780</th>\n","      <td>Mountain View</td>\n","      <td>CA</td>\n","      <td>Sunnyvale</td>\n","      <td>CA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>334684</th>\n","      <td>SCHAUMBURG</td>\n","      <td>IL</td>\n","      <td>Schaumburg</td>\n","      <td>IL</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>4</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>51094 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ba148b5-9d82-4a10-bc9e-c42c735d8362')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6ba148b5-9d82-4a10-bc9e-c42c735d8362 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6ba148b5-9d82-4a10-bc9e-c42c735d8362');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":173}],"source":["train_data.sample(frac = 0.1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1670462885456,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"t1uEvuInVO3G","outputId":"23ef285c-7f5a-4a3b-f180-22ea76cc6834"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["162365    Certified\n","389461    Certified\n","116124    Certified\n","237021    Certified\n","274803    Certified\n","            ...    \n","236468       Denied\n","509840    Certified\n","113641    Certified\n","458242    Certified\n","136342    Certified\n","Name: CASE_STATUS, Length: 51094, dtype: object"]},"metadata":{},"execution_count":174}],"source":["train_data_y.sample(frac = 0.1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":736},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1670462885458,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"Sfl5kHX9O6C9","outputId":"7ce18a9f-a39d-42ea-b6ca-a5ace97a39dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["EMPLOYER_CITY 7711 7711 object \n","\n","EMPLOYER_STATE 56 57 object \n","\n","WORKSITE_CITY 14035 14036 object \n","\n","WORKSITE_STATE 55 55 object \n","\n","WORKSITE_WORKERS 49 49 int64 \n","\n","r_year 4 4 int64 \n","\n","r_month 12 12 int64 \n","\n","r_day 31 31 int64 \n","\n","[]\n","0\n"]},{"output_type":"execute_result","data":{"text/plain":["          EMPLOYER_CITY EMPLOYER_STATE  WORKSITE_CITY WORKSITE_STATE  \\\n","0                    WI             WI          Plano             TX   \n","1       RIDGEFIELD PARK             NJ          Plano             TX   \n","2               Hoboken             NJ        Hoboken             NJ   \n","3             Charlotte             NC         Denver             CO   \n","4            Los Alamos             NM     Los Alamos             NM   \n","...                 ...            ...            ...            ...   \n","510938    San Francisco             CA  SAN FRANCISCO             CA   \n","510939    San Francisco             CA  SAN FRANCISCO             CA   \n","510940         Secaucus             NJ       New York             NY   \n","510941           Austin             TX         Austin             TX   \n","510942            Davis             CA          Davis             CA   \n","\n","        WORKSITE_WORKERS  r_year  r_month  r_day  \n","0                      1    2019       10      1  \n","1                      1    2019       10      1  \n","2                      1    2019       10      1  \n","3                      1    2019       10      2  \n","4                      1    2019       10      2  \n","...                  ...     ...      ...    ...  \n","510938                 1    2022        6     28  \n","510939                 1    2022        6     28  \n","510940                 1    2022        6     29  \n","510941                 1    2022        6     29  \n","510942                 1    2022        6     30  \n","\n","[510943 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-b76f647a-1f7e-4956-9794-f1b9772e2da0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>EMPLOYER_CITY</th>\n","      <th>EMPLOYER_STATE</th>\n","      <th>WORKSITE_CITY</th>\n","      <th>WORKSITE_STATE</th>\n","      <th>WORKSITE_WORKERS</th>\n","      <th>r_year</th>\n","      <th>r_month</th>\n","      <th>r_day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>WI</td>\n","      <td>WI</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>RIDGEFIELD PARK</td>\n","      <td>NJ</td>\n","      <td>Plano</td>\n","      <td>TX</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>Hoboken</td>\n","      <td>NJ</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Charlotte</td>\n","      <td>NC</td>\n","      <td>Denver</td>\n","      <td>CO</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>10</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>Los Alamos</td>\n","      <td>NM</td>\n","      <td>1</td>\n","      <td>2019</td>\n","      <td>10</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>510938</th>\n","      <td>San Francisco</td>\n","      <td>CA</td>\n","      <td>SAN FRANCISCO</td>\n","      <td>CA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>510939</th>\n","      <td>San Francisco</td>\n","      <td>CA</td>\n","      <td>SAN FRANCISCO</td>\n","      <td>CA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>510940</th>\n","      <td>Secaucus</td>\n","      <td>NJ</td>\n","      <td>New York</td>\n","      <td>NY</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>510941</th>\n","      <td>Austin</td>\n","      <td>TX</td>\n","      <td>Austin</td>\n","      <td>TX</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>510942</th>\n","      <td>Davis</td>\n","      <td>CA</td>\n","      <td>Davis</td>\n","      <td>CA</td>\n","      <td>1</td>\n","      <td>2022</td>\n","      <td>6</td>\n","      <td>30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>510943 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b76f647a-1f7e-4956-9794-f1b9772e2da0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b76f647a-1f7e-4956-9794-f1b9772e2da0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b76f647a-1f7e-4956-9794-f1b9772e2da0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":175}],"source":["# value count code \n","del_col = []\n","\n","for i in range(len(train_data.columns)): \n","    print(train_data.columns[i] , train_data.iloc[:, i].nunique(dropna = True) , train_data.iloc[:, i].nunique(dropna = False) , train_data.dtypes[i]  , '\\n')\n","    if (train_data.dtypes[i] == object and train_data.iloc[:, i].nunique() > len(train_data)/30): \n","        # then this has to be removed \n","        del_col.append(train_data.columns[i])\n","\n","print(del_col)\n","print(len(del_col))\n","\n","train_data = train_data.drop(columns = del_col)\n","train_data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":580,"status":"ok","timestamp":1670462886025,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"nWiMRRwbPFOA","outputId":"503d26e3-cd66-4938-cea5-4f8ae555fb44"},"outputs":[{"output_type":"stream","name":"stdout","text":["EMPLOYER_CITY 7711 7711 object \n","\n","EMPLOYER_STATE 56 57 object \n","\n","WORKSITE_CITY 14035 14036 object \n","\n","WORKSITE_STATE 55 55 object \n","\n","WORKSITE_WORKERS 49 49 int64 \n","\n","r_year 4 4 int64 \n","\n","r_month 12 12 int64 \n","\n","r_day 31 31 int64 \n","\n","{1: 'most_frequent', 2: 'most_frequent'}\n"]}],"source":["# Finding the best strategies for the data to altered and preprocessed for Learning\n","\n","strategy = {}\n","\n","for i in range(len(train_data.columns)): \n","    print(train_data.columns[i] , train_data.iloc[:, i].nunique(dropna = True) , train_data.iloc[:, i].nunique(dropna = False) ,  train_data.dtypes[i]  , '\\n')\n","    if (train_data.iloc[:, i].nunique(dropna = True) != train_data.iloc[:, i].nunique(dropna = False) and train_data.dtypes[i] == object) : \n","        strategy[i] = 'most_frequent'\n","    if (train_data.iloc[:, i].nunique(dropna = True) != train_data.iloc[:, i].nunique(dropna = False) and train_data.dtypes[i] != object) : \n","        strategy[i] = 'median'\n","print(strategy)"]},{"cell_type":"markdown","metadata":{"id":"UGBZg959ObvE"},"source":["### Converting dataset into numpy \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E6JFUiJJPhJp"},"outputs":[],"source":["y_tr = train_data_y.values\n","x_tr = train_data.iloc[:, :].values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1670462886662,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"OUjjdDPCWIm_","outputId":"faa1d894-102c-44bd-a0b5-0cc378229a49"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array(['Certified', 'Certified - Withdrawn', 'Denied', 'Withdrawn'],\n","       dtype=object), array([474513,  24549,   2650,   9231]))"]},"metadata":{},"execution_count":178}],"source":["np.unique(train_data_y, return_counts=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y81G_ASGPjjn"},"outputs":[],"source":["TEST_SIZE = 0.1\n","# DO NOT CHANGE\n","x_tr, x_te, y_tr, y_te = train_test_split(x_tr, y_tr, test_size = TEST_SIZE)"]},{"cell_type":"markdown","metadata":{"id":"LfSh48pqWnta"},"source":["### Correcting missing values using strategies decided earliar"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1670462887273,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"FK95cXt-PrQZ","outputId":"74d1ab42-bba6-49a9-a3ba-7d5da9a595aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["(459848, 8)\n","[['BEDMINSTER' 'NJ' 'BOTHELL' ... 2021 10 19]\n"," ['Southfield' 'MI' 'Southfield' ... 2021 12 1]\n"," ['Commerce' 'CA' 'Fort Lee' ... 2022 1 10]\n"," ...\n"," ['Sunnyvale' 'CA' 'Sunnyvale' ... 2021 11 10]\n"," ['Houston' 'TX' 'Houston' ... 2022 3 7]\n"," ['Chicago' 'IL' 'Burbank ' ... 2021 9 30]]\n","1\n","2\n"]}],"source":["\n","print(x_tr.shape)\n","print(x_tr)\n","# DO NOT CHANGE\n","missing_values_fix(x_tr, x_te,  col = strategy.keys() , strategy = strategy )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1670462887274,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"bRr6DtxMPxX9","outputId":"38d09068-d40d-413b-a9d1-8d6d08002218"},"outputs":[{"output_type":"stream","name":"stdout","text":["[['BEDMINSTER' 'NJ' 'BOTHELL' 'WA' 1 2021 10 19]\n"," ['Southfield' 'MI' 'Southfield' 'MI' 1 2021 12 1]\n"," ['Commerce' 'CA' 'Fort Lee' 'NJ' 1 2022 1 10]\n"," ['Braintree' 'MA' 'Holbrook ' 'MA' 1 2022 5 27]\n"," ['SAN JOSE' 'CA' 'NEW YORK' 'NY' 1 2022 6 16]]\n"]}],"source":["print(x_tr[:5, :])\n"]},{"cell_type":"markdown","metadata":{"id":"l3DAFivOW0F4"},"source":["### Label encoding "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":737,"status":"ok","timestamp":1670462888004,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"SUq1kgAsQ7Ru","outputId":"fe2585c6-b8a2-4799-e78a-73ce2c7f2087"},"outputs":[{"output_type":"stream","name":"stdout","text":["EMPLOYER_CITY 7711 7711 object \n","\n","EMPLOYER_STATE 56 57 object \n","\n","WORKSITE_CITY 14035 14036 object \n","\n","WORKSITE_STATE 55 55 object \n","\n","WORKSITE_WORKERS 49 49 int64 \n","\n","r_year 4 4 int64 \n","\n","r_month 12 12 int64 \n","\n","r_day 31 31 int64 \n","\n","[0, 1, 2, 3]\n","4\n","[[532 34 1842 51 1 2021 10 19]\n"," [6462 24 11837 23 1 2021 12 1]\n"," [1548 4 4917 33 1 2022 1 10]\n"," [915 21 5994 20 1 2022 5 27]\n"," [5883 4 8574 36 1 2022 6 16]]\n"]}],"source":["\n","le_col = []\n","for i in range(len(train_data.columns)): \n","    print(train_data.columns[i] , train_data.iloc[:, i].nunique(dropna = True) , train_data.iloc[:, i].nunique(dropna = False) , train_data.dtypes[i]  , '\\n')\n","    if (train_data.dtypes[i] == object): \n","        # label encoding is required \n","        le_col.append(i)\n","\n","print(le_col)\n","print(len(le_col))\n","\n","\n","le_col = le_col.copy()\n","modify_label_encoder(x_tr, x_te, le_col)\n","\n","print(x_tr[:5,:])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":700,"status":"ok","timestamp":1670462888701,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"8EOqiSZcP5i2","outputId":"d87b8c70-394f-42e3-c9e6-cce668781ad8"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}],"source":["# label encoding for y_tr\n","le = LabelEncoder()\n","\n","le.fit(np.concatenate((y_tr , y_te ) , axis = 0))\n","y_tr = le.transform(y_tr)\n","#print('transform 1')\n","y_te = le.transform(y_te)\n","#print('transform 2')\n","print(np.max(y_te))\n"]},{"cell_type":"markdown","metadata":{"id":"1sOEx5qoBqr8"},"source":["### Old code"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1670462888702,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"9w0aK-zeBvvt","outputId":"e2c4b492-4800-4b8e-be81-5700bf635cfb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nif \"linear_classification\" in test_models_regression : \\n    from sklearn.linear_model import LinearRegression\\n    SS = StandardScaler()\\n    x_tr_st = SS.fit_transform(x_tr)\\n    x_te_st = SS.transform(x_te)\\n\\n    print(\\'\\n\\n\\')\\n    print(\\'\\n\\n\\nlinear regression results ::\\n\\')\\n    tune_param = {\\n        \\n    }\\n    linr = GridSearchCV( LinearRegression(), tune_param , cv = 5, )\\n    linr.fit(x_tr_st, y_tr)\\n    #print(\\'Best Parameters results :\\' , clf.cv_results_)\\n    print(\\'best Parameteres: \\' , linr.best_params_)\\n    \\n    linr.fit(x_tr_st, y_tr)\\n    y_p_tr = linr.predict(x_tr_st)\\n    y_p_te = linr.predict(x_te_st)\\n    y_p_q = linr.predict(SS.transform(X_q))\\n    \\n\\n    from sklearn.metrics import mean_squared_error\\n    \\n    print(\\'train :\\' , mean_squared_error(y_tr, y_p_tr) )\\n    print(\\'test :\\' , mean_squared_error(y_te, y_p_te))\\n    print(\\'model score : \\', linr.score(x_te_st, y_te))\\n    from sklearn.metrics import r2_score, confusion_matrix\\n    print(confusion_matrix(y_te, y_p_te))\\n    print(\\'r2_score_test :\\' ,r2_score(y_te, y_p_te))\\n    test_models_regression[\\'linear_classification\\'] =  (linr , y_p_q,  mean_squared_error(y_te, y_p_te) )\\n    \\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":184}],"source":["'''\n","if \"linear_classification\" in test_models_regression : \n","    from sklearn.linear_model import LinearRegression\n","    SS = StandardScaler()\n","    x_tr_st = SS.fit_transform(x_tr)\n","    x_te_st = SS.transform(x_te)\n","\n","    print('\\n\\n')\n","    print('\\n\\n\\nlinear regression results ::\\n')\n","    tune_param = {\n","        \n","    }\n","    linr = GridSearchCV( LinearRegression(), tune_param , cv = 5, )\n","    linr.fit(x_tr_st, y_tr)\n","    #print('Best Parameters results :' , clf.cv_results_)\n","    print('best Parameteres: ' , linr.best_params_)\n","    \n","    linr.fit(x_tr_st, y_tr)\n","    y_p_tr = linr.predict(x_tr_st)\n","    y_p_te = linr.predict(x_te_st)\n","    y_p_q = linr.predict(SS.transform(X_q))\n","    \n","\n","    from sklearn.metrics import mean_squared_error\n","    \n","    print('train :' , mean_squared_error(y_tr, y_p_tr) )\n","    print('test :' , mean_squared_error(y_te, y_p_te))\n","    print('model score : ', linr.score(x_te_st, y_te))\n","    from sklearn.metrics import r2_score, confusion_matrix\n","    print(confusion_matrix(y_te, y_p_te))\n","    print('r2_score_test :' ,r2_score(y_te, y_p_te))\n","    test_models_regression['linear_classification'] =  (linr , y_p_q,  mean_squared_error(y_te, y_p_te) )\n","    \n","'''"]},{"cell_type":"markdown","metadata":{"id":"CXeYGSPSV9f5"},"source":["### Applying the models finally"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9878,"status":"ok","timestamp":1670462898571,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"DhAJrTrGVwiK","outputId":"ea50a3f9-c19a-435d-ce63-fc1715a6553d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","logistics classification results ::\n","\n","train : 0.20335850106991876\n","test : 0.2068304139348273\n","model score :  0.9563949505822488\n","[[427010      0      0      0]\n"," [  9595  12552      0      0]\n"," [  2417      0      0      0]\n"," [  8231     43      0      0]]\n","[[47503     0     0     0]\n"," [ 1038  1364     0     0]\n"," [  233     0     0     0]\n"," [  954     3     0     0]]\n","r2_score_test : 0.064976890119403\n"]}],"source":["test_models_regression = { 'logistic_classification': () , 'deep_learning_RNN': ()}\n","\n","\n","\n","'''\n","Using logistic regressions to estimate acceptance rate\n","'''\n","\n","if \"logistic_classification\" in test_models_regression : \n","    from sklearn.linear_model import LogisticRegression\n","    linr = LogisticRegression(max_iter = 10000, multi_class='multinomial')\n","    SS = StandardScaler()\n","    x_tr_st = SS.fit_transform(x_tr)\n","    x_te_st = SS.transform(x_te)\n","\n","    print('\\nlogistics classification results ::\\n')\n","    tune_param = {\n","        \n","    }\n","    #linr = GridSearchCV( LogisticRegression(), tune_param )\n","    linr.fit(x_tr_st, y_tr)\n","    #print('Best Parameters results :' , clf.cv_results_)\n","    #print('best Parameteres: ' , linr.best_params_)\n","    \n","    y_p_tr = linr.predict(x_tr_st)\n","    y_p_te = linr.predict(x_te_st)\n","    \n","\n","    from sklearn.metrics import mean_squared_error\n","    \n","    print('train :' , mean_squared_error(y_tr, y_p_tr) )\n","    print('test :' , mean_squared_error(y_te, y_p_te))\n","    print('model score : ', linr.score(x_te_st, y_te))\n","    from sklearn.metrics import r2_score, confusion_matrix\n","    conf_mat_tr =confusion_matrix(y_tr, y_p_tr) \n","    conf_mat_te =confusion_matrix(y_te, y_p_te)\n","    print(confusion_matrix(y_tr, y_p_tr))\n","    print(confusion_matrix(y_te, y_p_te))\n","    print('r2_score_test :' ,r2_score(y_te, y_p_te))\n","    test_models_regression['logistic_classification'] =  (linr , y_p_te,  mean_squared_error(y_te, y_p_te) )\n"]},{"cell_type":"markdown","metadata":{"id":"P-fNmHmoZ0c8"},"source":["### Performance of Logistic classification model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1670462898572,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"YARpjnXRPire","outputId":"c8d002a7-7001-4a09-c638-391635029075"},"outputs":[{"output_type":"stream","name":"stdout","text":["PERFORMANCE_OF_LOGISTIC_REGRESSION_TRAINING =  0.9558854230093422\n","PERFORMANCE_OF_LOGISTIC_REGRESSION_TESTING =   0.9563949505822488\n","\n","              precision    recall  f1-score   support\n","\n","           C       0.96      1.00      0.98     47503\n","          CW       1.00      0.57      0.72      2402\n","           W       0.00      0.00      0.00       233\n","           D       0.00      0.00      0.00       957\n","\n","    accuracy                           0.96     51095\n","   macro avg       0.49      0.39      0.43     51095\n","weighted avg       0.94      0.96      0.94     51095\n","\n"]}],"source":["'''\n","let's test how good we performed. \n","our performance matrix = correctly classified vs incorrectly classified. \n","'''\n","\n","\n","PERFORMANCE_OF_LINEAR_REGRESSION_TRAINING = np.sum(np.diag(conf_mat_tr)) / np.sum(conf_mat_tr)\n","PERFORMANCE_OF_LINEAR_REGRESSION_TESTING = np.sum(np.diag(conf_mat_te)) / np.sum(conf_mat_te)\n","print(\"PERFORMANCE_OF_LOGISTIC_REGRESSION_TRAINING = \", PERFORMANCE_OF_LINEAR_REGRESSION_TRAINING)\n","print(\"PERFORMANCE_OF_LOGISTIC_REGRESSION_TESTING =  \", PERFORMANCE_OF_LINEAR_REGRESSION_TESTING)\n","print()\n","\n","print(classification_report(y_te, y_p_te, target_names = ['C' , 'CW' , 'W', 'D'], zero_division = 0 ))"]},{"cell_type":"markdown","metadata":{"id":"lYLkgVYieFSx"},"source":["### Comment on Logistic Regression Results\n","\n","As our data is skewed with Certified and Cetified Withdrawn entries, the precision, recall and F1-score for Withdrawn and Denied is coming to be 0."]},{"cell_type":"markdown","metadata":{"id":"xlJ5XgNVMEj8"},"source":["# Implementing CNN"]},{"cell_type":"markdown","metadata":{"id":"Z_yjLm8ba01d"},"source":["### Implementing the model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":628,"status":"ok","timestamp":1670463285672,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"4_Gdefdya-IW","outputId":"0fd3789c-956a-418b-9447-2d70bae3276a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Is Cuda Available: True\n","Device: cuda:0\n"]}],"source":["print(\"Is Cuda Available:\", torch.cuda.is_available())\n","device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","print(\"Device:\", device)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1670463286342,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"1VQz67Faa33w","outputId":"3bc067fc-5982-4c37-cbe6-55e3cf950e8e"},"outputs":[{"output_type":"stream","name":"stdout","text":["(459848, 8) (459848,) [0 0 3 0 0] [[532 34 1842 51 1 2021 10 19]\n"," [6462 24 11837 23 1 2021 12 1]\n"," [1548 4 4917 33 1 2022 1 10]\n"," [915 21 5994 20 1 2022 5 27]\n"," [5883 4 8574 36 1 2022 6 16]]\n","Training input size: torch.Size([459848, 8])\n","Training label size: torch.Size([459848])\n"]}],"source":["# cleaned data - x_tr, y_tr, x_te, y_te\n","# this is time series data \n","print(x_tr.shape, y_tr.shape, y_tr[:5], x_tr[:5])\n","\n","SS = StandardScaler()\n","x_tr_st = SS.fit_transform(x_tr)\n","x_te_st = SS.transform(x_te)\n","\n","x_tr_tensor = torch.tensor(x_tr_st.astype(np.float64), dtype = torch.float64).to(device)\n","y_tr_tensor = torch.tensor(y_tr.astype(np.float64), dtype = torch.float64).to(device)\n","y_tr_tensor_oh = F.one_hot(y_tr_tensor.to(torch.int64)).to(torch.float64)\n","x_te_tensor = torch.tensor(x_te_st.astype(np.float64), dtype = torch.float64).to(device)\n","    \n","print(\"Training input size:\", x_tr_tensor.size())\n","print(\"Training label size:\", y_tr_tensor.size())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ihzVtmu2MHoi"},"outputs":[],"source":["class approved_predictor(nn.Module): \n","    def __init__(self, d_date=True): \n","        super(approved_predictor, self).__init__()\n","\n","        self.d_date = d_date\n","        inputSize = 11 if d_date else 8\n","\n","        self.model = nn.Sequential(\n","            nn.Linear(inputSize, 16),\n","            nn.ReLU(),\n","            nn.Linear(16,16),\n","            nn.ReLU(),\n","            nn.Linear(16,8),\n","            nn.ReLU(),\n","            nn.Linear(8,8),\n","            nn.ReLU(),\n","            nn.Linear(8,8),\n","            nn.ReLU(),\n","            nn.Linear(8,8),\n","            nn.ReLU(),\n","            nn.Linear(8,4),\n","            nn.Softmax(dim=1)\n","        )\n","\n","    def forward(self, x):\n","        if self.d_date == False:\n","            x = x[:, :8]\n","        return self.model(x)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XJ-R_XQWWHIh"},"outputs":[],"source":["def train(model, points, labels, learningRate=0.01, MAX_iter=10000, printEvery=1000):\n","    loss = nn.MSELoss()\n","    losses = []\n","\n","    optimizer = torch.optim.Adam(model.parameters(), lr=learningRate)\n","\n","    points = points.float()\n","    labels = labels.float()\n","\n","    for itr in range(MAX_iter):\n","\n","        # Clear gradient buffers \n","        optimizer.zero_grad()\n","\n","        # Create the iterations batch and labels\n","        rand_vec = torch.randint(0, points.size()[0] - 2, size = (batch_size,))\n","        batch = points.float()[rand_vec,:]\n","        batch_labels = labels.float()[rand_vec]\n","\n","        # get output from the model, given the inputs\n","        outputs = model(batch)\n","\n","        # get loss for the predicted output\n","        lossvalue = loss(outputs, batch_labels)\n","        if itr%100 == 0:\n","          losses.append(lossvalue.item())\n","\n","        # get gradients w.r.t to parameters\n","        lossvalue.backward()\n","        \n","        optimizer.step()\n","\n","        if itr % printEvery == 0:\n","            print(\"Epoch {}: loss={:.5f}\".format(itr/100, lossvalue.item()))\n","        \n","    return model, losses"]},{"cell_type":"markdown","metadata":{"id":"rXjB0NbBvpa5"},"source":["### Plotting the performance of the deep learning model to make predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":34388,"status":"ok","timestamp":1670464142864,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"I0_yInn0fvaO","outputId":"a65d3b19-1671-46bd-cd38-c3c6c5c47cb1"},"outputs":[{"output_type":"stream","name":"stdout","text":["approved_predictor(\n","  (model): Sequential(\n","    (0): Linear(in_features=8, out_features=16, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=16, out_features=16, bias=True)\n","    (3): ReLU()\n","    (4): Linear(in_features=16, out_features=8, bias=True)\n","    (5): ReLU()\n","    (6): Linear(in_features=8, out_features=8, bias=True)\n","    (7): ReLU()\n","    (8): Linear(in_features=8, out_features=8, bias=True)\n","    (9): ReLU()\n","    (10): Linear(in_features=8, out_features=8, bias=True)\n","    (11): ReLU()\n","    (12): Linear(in_features=8, out_features=4, bias=True)\n","    (13): Softmax(dim=1)\n","  )\n",")\n","Epoch 0.0: loss=0.16828\n","Epoch 10.0: loss=0.02806\n","Epoch 20.0: loss=0.01869\n","Epoch 30.0: loss=0.01785\n","Epoch 40.0: loss=0.01925\n","Epoch 50.0: loss=0.01923\n","Epoch 60.0: loss=0.01896\n","Epoch 70.0: loss=0.01937\n","Epoch 80.0: loss=0.01915\n","Epoch 90.0: loss=0.01880\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Training Confusion Matrix\n","[[426961     49      0      0]\n"," [  7804  14343      0      0]\n"," [  2417      0      0      0]\n"," [  8231     43      0      0]]\n","\n","Testing Confusion Matrix\n","[[47494     9     0     0]\n"," [  841  1561     0     0]\n"," [  233     0     0     0]\n"," [  954     3     0     0]]\n","\n","Accuracy of the model in MSE:  0.20315099324787161\n","PERFORMANCE_OF_CNN_REGRESSION_TRAINING =  0.95967363128686\n","PERFORMANCE_OF_CNN_REGRESSION_TESTING =   0.9600743712692045\n","\n","              precision    recall  f1-score   support\n","\n","           C       0.96      1.00      0.98     47503\n","          CW       0.99      0.65      0.79      2402\n","           W       0.00      0.00      0.00       233\n","           D       0.00      0.00      0.00       957\n","\n","    accuracy                           0.96     51095\n","   macro avg       0.49      0.41      0.44     51095\n","weighted avg       0.94      0.96      0.95     51095\n","\n"]}],"source":["if \"deep_learning_RNN\" in test_models_regression : \n","    \n","    approved_pred = approved_predictor(False).to(device)\n","    \n","    batch_size, lr = 10000, 5e-4\n","\n","    print(approved_pred)\n","        \n","    approved_pred, losses = train(approved_pred, x_tr_tensor, y_tr_tensor_oh, learningRate=lr)\n","\n","    plt.plot(losses)\n","    plt.ylabel('loss')\n","    plt.xlabel('epoch')\n","    plt.title(\"Learning rate %f\"%(lr))\n","    plt.show()\n","\n","\n","    y_p_te = np.around( np.array(torch.argmax(approved_pred(x_te_tensor.float()) , dim=1).detach().cpu()))\n","    y_p_tr = np.around( np.array(torch.argmax(approved_pred(x_tr_tensor.float()), dim=1).detach().cpu()))\n","\n","    conf_mat_tr = confusion_matrix(y_tr, y_p_tr) \n","    conf_mat_te = confusion_matrix(y_te, y_p_te)\n","    print(\"Training Confusion Matrix\")\n","    print(confusion_matrix(y_tr, y_p_tr))\n","    print(\"\\nTesting Confusion Matrix\")\n","    print(confusion_matrix(y_te, y_p_te))\n","\n","    print(\"\\nAccuracy of the model in MSE: \" , mean_squared_error(y_te, y_p_te) )\n","    #print('r2_score_test :' ,r2_score(y_te, y_p_te))\n","    \n","    test_models_regression['deep_learning_RNN'] =  (approved_pred , y_p_te,  mean_squared_error(y_te, y_p_te) )\n","\n","\n","    '''\n","    let's test how good we performed. \n","    our performance matrix = correctly classified vs incorrectly classified. \n","    '''\n","    \n","    PERFORMANCE_OF_LINEAR_REGRESSION_TRAINING = np.sum(np.diag(conf_mat_tr)) / np.sum(conf_mat_tr)\n","    PERFORMANCE_OF_LINEAR_REGRESSION_TESTING = np.sum(np.diag(conf_mat_te)) / np.sum(conf_mat_te)\n","    print(\"PERFORMANCE_OF_CNN_REGRESSION_TRAINING = \", PERFORMANCE_OF_LINEAR_REGRESSION_TRAINING)\n","    print(\"PERFORMANCE_OF_CNN_REGRESSION_TESTING =  \", PERFORMANCE_OF_LINEAR_REGRESSION_TESTING)\n","    print()\n","\n","    print(classification_report(y_te, y_p_te, target_names = ['C' , 'CW' , 'W', 'D'], zero_division = 0 ))\n","    "]},{"cell_type":"markdown","metadata":{"id":"8InShiEmup0k"},"source":["# Implementing the RNN - LSTM Model"]},{"cell_type":"markdown","metadata":{"id":"Ws4O50c4u9F5"},"source":["## Preparing the data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7QtsJ09ku_tt"},"outputs":[],"source":["# Dropping rows with missing values\n","data_x.dropna(inplace = True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mNAYXssBvDKF"},"outputs":[],"source":["# Converting Decision date and received date to date time\n","data_x['DECISION_DATE'] = pd.to_datetime(data_x['DECISION_DATE'])\n","data_x['RECEIVED_DATE'] = pd.to_datetime(data_x['RECEIVED_DATE'])\n","\n","# Sorting by decision date\n","data_x.sort_values(by = ['DECISION_DATE'],inplace = True)\n","\n","#Dropping columns not needed in LSTM\n","data_x.drop(['RECEIVED_DATE','EMPLOYER_CITY','EMPLOYER_STATE','WORKSITE_CITY','WORKSITE_STATE','WORKSITE_WORKERS'],axis = 1,inplace = True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UovzMOxMvGCi"},"outputs":[],"source":["# Adding total visas processed per data to dataframe\n","trial = {}\n","sum = 0\n","for i in data_x['DECISION_DATE']:\n","  if i not in trial:\n","    trial[i] = 1\n","  else:\n","    trial[i] += 1\n","\n","for k,v in trial.items():\n","  data_x.loc[data_x['DECISION_DATE'] == k, 'TOTAL_COUNT'] = int(v)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LuKSmo2RvIRM"},"outputs":[],"source":["#Restting the index to get correct dates\n","data_x.reset_index(drop=True, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"76bAJ3DDvKx7"},"source":["## Building LSTM Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H4d0DSCBvNBg"},"outputs":[],"source":["def data_prep_lstm(case):\n","  # Creating a copy of the dataset\n","  data_x_copy = data_x.copy()\n","\n","  # Filtering to particular case status\n","  certified = data_x_copy[data_x_copy[\"CASE_STATUS\"] == case]\n","\n","  #Finding percentage of case status with respect to total visas given that day\n","  certified1 = {}\n","  sum = 0\n","  for i in certified['DECISION_DATE']:\n","    if i not in certified1:\n","      certified1[i] = 1\n","    else:\n","      certified1[i] += 1\n","  for k,v in certified1.items():\n","    certified.loc[certified['DECISION_DATE'] == k, 'COUNT'] = int(v)\n","  \n","  #Dropping duplicate decision dates\n","  certified = certified.drop_duplicates(subset=['DECISION_DATE'], keep='last')\n","\n","  #Finding percentage\n","  certified['Percentage'] = (certified['COUNT']/certified['TOTAL_COUNT'])*100\n","\n","  #Dropping unrequired columns\n","  certified.drop(['CASE_STATUS','TOTAL_COUNT','COUNT'],axis = 1,inplace = True)\n","\n","  #Setting decision date as the index\n","  certified.reset_index(drop=True, inplace=True)\n","  certified.set_index('DECISION_DATE',inplace = True)\n","\n","  #Adding missing dates\n","  new_date_range = pd.date_range(start=data_x['DECISION_DATE'][0], end=data_x['DECISION_DATE'].iat[-1], \n","                                 freq=\"D\")\n","  certified = certified.reindex(new_date_range, fill_value=np.NaN)\n","\n","  #Filling missing values for newly added dates by mean\n","  certified = certified.fillna(certified.mean())\n","\n","  return certified"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZP1-UO0-vRV6"},"outputs":[],"source":["def apply_lstm(case):\n","  trial1 = data_prep_lstm(case)\n","\n","  ##CReating training and test sets\n","  train = trial1.iloc[:int(len(trial1)*0.9)]\n","  test = trial1.iloc[int(len(trial1)*0.9):]\n","\n","  #Using MinMaxScaler to get values in range\n","  scaler = MinMaxScaler()\n","  scaler.fit(train)\n","  scaled_train = scaler.transform(train)\n","  scaled_test = scaler.transform(test)\n","\n","  #Building the model\n","  n_input = 12\n","  n_features = 1\n","  generator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)\n","\n","  # define model\n","  model = Sequential()\n","  model.add(layers.LSTM(100, return_sequences=True, input_shape=(n_input, n_features)))\n","  model.add(layers.LSTM(100, return_sequences=True))\n","  model.add(layers.LSTM(100, return_sequences=False))\n","  model.add(layers.Dense(25))\n","  model.add(layers.Dense(1))\n","  model.compile(optimizer='adam', loss='mse')\n","\n","  #Fitting the model\n","  model.fit(generator,epochs=50)\n","\n","  #Plotting a plot for the loss\n","  loss_per_epoch = model.history.history['loss']\n","  print(plt.plot(range(len(loss_per_epoch)),loss_per_epoch))\n","\n","  #Getting the testset values\n","  test_predictions = []\n","\n","  first_eval_batch = scaled_train[-n_input:]\n","  current_batch = first_eval_batch.reshape((1, n_input, n_features))\n","\n","  for i in range(len(test)):\n","      \n","      # get the prediction value for the first batch\n","      current_pred = model.predict(current_batch)[0]\n","      \n","      # append the prediction into the array\n","      test_predictions.append(current_pred) \n","      \n","      # use the prediction to update the batch and remove the first value\n","      current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n","  \n","  #Getting the predictions\n","  true_predictions = scaler.inverse_transform(test_predictions)\n","\n","  #Adding predictions to test\n","  test['Predictions'] = true_predictions\n","\n","  #Printing the results\n","  print(test.plot(figsize=(14,5)))\n","\n","  #Printing the RSME value\n","  rmse=sqrt(mean_squared_error(test['Percentage'],test['Predictions']))\n","  print(\"RSME: \",rmse)\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"8PFBYeq1vcIA"},"source":["## Appling the LSTM model to various visa results"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"zVAJIsXsvibr","executionInfo":{"status":"ok","timestamp":1670463018432,"user_tz":360,"elapsed":88210,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"}},"outputId":"7a3df858-aeaa-4b12-d35d-8c47b50893c0"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1684: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1817: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","233/233 [==============================] - 6s 6ms/step - loss: 0.0903\n","Epoch 2/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0714\n","Epoch 3/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0591\n","Epoch 4/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0555\n","Epoch 5/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0550\n","Epoch 6/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0553\n","Epoch 7/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0543\n","Epoch 8/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0552\n","Epoch 9/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0477\n","Epoch 10/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0489\n","Epoch 11/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0504\n","Epoch 12/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0458\n","Epoch 13/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0462\n","Epoch 14/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0444\n","Epoch 15/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0435\n","Epoch 16/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0404\n","Epoch 17/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0450\n","Epoch 18/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0390\n","Epoch 19/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0410\n","Epoch 20/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0440\n","Epoch 21/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0392\n","Epoch 22/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0428\n","Epoch 23/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0382\n","Epoch 24/50\n","233/233 [==============================] - 2s 9ms/step - loss: 0.0411\n","Epoch 25/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0398\n","Epoch 26/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0362\n","Epoch 27/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0373\n","Epoch 28/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0356\n","Epoch 29/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0390\n","Epoch 30/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0384\n","Epoch 31/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0346\n","Epoch 32/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0335\n","Epoch 33/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0372\n","Epoch 34/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0385\n","Epoch 35/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0324\n","Epoch 36/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0306\n","Epoch 37/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0307\n","Epoch 38/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0330\n","Epoch 39/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0391\n","Epoch 40/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0359\n","Epoch 41/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0312\n","Epoch 42/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0435\n","Epoch 43/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0294\n","Epoch 44/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0316\n","Epoch 45/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0355\n","Epoch 46/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0294\n","Epoch 47/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0290\n","Epoch 48/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0280\n","Epoch 49/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0271\n","Epoch 50/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0298\n","[<matplotlib.lines.Line2D object at 0x7ff377f710d0>]\n","1/1 [==============================] - 1s 1s/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","AxesSubplot(0.125,0.125;0.775x0.755)\n","RSME:  19.367148820028895\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-197-e72ed7e8f2e3>:56: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["apply_lstm(\"Certified - Withdrawn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"5_-UtHnTviei","executionInfo":{"status":"ok","timestamp":1670463104991,"user_tz":360,"elapsed":86569,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"}},"outputId":"1f483bf3-c7b6-49f1-b5a5-70e2ba7bb9fa"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1684: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1817: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","233/233 [==============================] - 6s 6ms/step - loss: 0.0520\n","Epoch 2/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0501\n","Epoch 3/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0475\n","Epoch 4/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0430\n","Epoch 5/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0485\n","Epoch 6/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0397\n","Epoch 7/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0398\n","Epoch 8/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0446\n","Epoch 9/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0440\n","Epoch 10/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0376\n","Epoch 11/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0373\n","Epoch 12/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0375\n","Epoch 13/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0373\n","Epoch 14/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0365\n","Epoch 15/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0355\n","Epoch 16/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0378\n","Epoch 17/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0353\n","Epoch 18/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0363\n","Epoch 19/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0355\n","Epoch 20/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0350\n","Epoch 21/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0364\n","Epoch 22/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0357\n","Epoch 23/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0359\n","Epoch 24/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0348\n","Epoch 25/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0370\n","Epoch 26/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0364\n","Epoch 27/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0355\n","Epoch 28/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0339\n","Epoch 29/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0332\n","Epoch 30/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0355\n","Epoch 31/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0348\n","Epoch 32/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0336\n","Epoch 33/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0339\n","Epoch 34/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0336\n","Epoch 35/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0346\n","Epoch 36/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0340\n","Epoch 37/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0328\n","Epoch 38/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0323\n","Epoch 39/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0336\n","Epoch 40/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0338\n","Epoch 41/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0330\n","Epoch 42/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0333\n","Epoch 43/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0315\n","Epoch 44/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0331\n","Epoch 45/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0329\n","Epoch 46/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0325\n","Epoch 47/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0312\n","Epoch 48/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0311\n","Epoch 49/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0324\n","Epoch 50/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0328\n","[<matplotlib.lines.Line2D object at 0x7ff377c860d0>]\n","1/1 [==============================] - 1s 1s/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","AxesSubplot(0.125,0.125;0.775x0.755)\n","RSME:  20.24666613461014\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-197-e72ed7e8f2e3>:56: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["apply_lstm(\"Withdrawn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":87119,"status":"ok","timestamp":1670463192099,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"37QQtLUMvhuF","outputId":"a9585a92-6a00-4943-a886-68e8f5f657f4"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1684: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1817: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","233/233 [==============================] - 6s 6ms/step - loss: 0.0496\n","Epoch 2/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0316\n","Epoch 3/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0293\n","Epoch 4/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0308\n","Epoch 5/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0295\n","Epoch 6/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0274\n","Epoch 7/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0276\n","Epoch 8/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0305\n","Epoch 9/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0284\n","Epoch 10/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0275\n","Epoch 11/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0288\n","Epoch 12/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0279\n","Epoch 13/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0265\n","Epoch 14/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0294\n","Epoch 15/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0268\n","Epoch 16/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0275\n","Epoch 17/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0281\n","Epoch 18/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0276\n","Epoch 19/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0272\n","Epoch 20/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0263\n","Epoch 21/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0273\n","Epoch 22/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0278\n","Epoch 23/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0272\n","Epoch 24/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0271\n","Epoch 25/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0267\n","Epoch 26/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0274\n","Epoch 27/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0266\n","Epoch 28/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0265\n","Epoch 29/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0263\n","Epoch 30/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0268\n","Epoch 31/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0265\n","Epoch 32/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0267\n","Epoch 33/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0274\n","Epoch 34/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0262\n","Epoch 35/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0263\n","Epoch 36/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0257\n","Epoch 37/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0261\n","Epoch 38/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0258\n","Epoch 39/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0253\n","Epoch 40/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0257\n","Epoch 41/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0264\n","Epoch 42/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0255\n","Epoch 43/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0262\n","Epoch 44/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0254\n","Epoch 45/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0265\n","Epoch 46/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0259\n","Epoch 47/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0264\n","Epoch 48/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0259\n","Epoch 49/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0258\n","Epoch 50/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0259\n","[<matplotlib.lines.Line2D object at 0x7ff37a007520>]\n","1/1 [==============================] - 1s 985ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 14ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 18ms/step\n","AxesSubplot(0.125,0.125;0.775x0.755)\n","RSME:  2.782004190072154\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-197-e72ed7e8f2e3>:56: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["apply_lstm(\"Certified\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":89487,"status":"ok","timestamp":1670463281573,"user":{"displayName":"Dushyant Singh Udawat","userId":"07042908007861807454"},"user_tz":360},"id":"DxOKAYEjviY1","outputId":"6fb9f127-1136-4e72-9a38-cc4e49d65d3a"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1684: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n","/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1817: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","233/233 [==============================] - 6s 8ms/step - loss: 0.0312\n","Epoch 2/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0271\n","Epoch 3/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0285\n","Epoch 4/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0261\n","Epoch 5/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0263\n","Epoch 6/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0259\n","Epoch 7/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0266\n","Epoch 8/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0263\n","Epoch 9/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0259\n","Epoch 10/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0262\n","Epoch 11/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0257\n","Epoch 12/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0259\n","Epoch 13/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0264\n","Epoch 14/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0262\n","Epoch 15/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0260\n","Epoch 16/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0252\n","Epoch 17/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0259\n","Epoch 18/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0255\n","Epoch 19/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0256\n","Epoch 20/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0256\n","Epoch 21/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0261\n","Epoch 22/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0256\n","Epoch 23/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0254\n","Epoch 24/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0257\n","Epoch 25/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0251\n","Epoch 26/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0248\n","Epoch 27/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0240\n","Epoch 28/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0251\n","Epoch 29/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0248\n","Epoch 30/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0251\n","Epoch 31/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0260\n","Epoch 32/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0257\n","Epoch 33/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0256\n","Epoch 34/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0246\n","Epoch 35/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0252\n","Epoch 36/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0241\n","Epoch 37/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0248\n","Epoch 38/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0259\n","Epoch 39/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0243\n","Epoch 40/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0243\n","Epoch 41/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0251\n","Epoch 42/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0244\n","Epoch 43/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0248\n","Epoch 44/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0242\n","Epoch 45/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0240\n","Epoch 46/50\n","233/233 [==============================] - 1s 6ms/step - loss: 0.0238\n","Epoch 47/50\n","233/233 [==============================] - 2s 8ms/step - loss: 0.0246\n","Epoch 48/50\n","233/233 [==============================] - 2s 7ms/step - loss: 0.0236\n","Epoch 49/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0237\n","Epoch 50/50\n","233/233 [==============================] - 2s 6ms/step - loss: 0.0240\n","[<matplotlib.lines.Line2D object at 0x7ff3721bdfd0>]\n","1/1 [==============================] - 2s 2s/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 32ms/step\n","1/1 [==============================] - 0s 46ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 30ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 37ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 15ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","AxesSubplot(0.125,0.125;0.775x0.755)\n","RSME:  0.2068569699375513\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-197-e72ed7e8f2e3>:56: SettingWithCopyWarning:\n","\n","\n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["apply_lstm(\"Denied\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["5MMb9H2b_12a","gnHtOHPe55Jh","eV-BddeU4Jec","RROF7r3-4T1_","1l7oUVhz3gUx","ABhjeU7xIOm-","uXf_-3B0I8Q3","FYOHwF9YJUl4","4OqbunmBJiO0","mdyHo6QSKFAE","o8eZITTaMfDd","SNRJK3-yOfp9","gCJeVDfHQWsn","eYnipl1rj-zu","CmBr85Ylk5CE","_9zKI6ubk_r0","_l3Um0454otn","vC-gqRmSQeYW","UGBZg959ObvE","LfSh48pqWnta","l3DAFivOW0F4","1sOEx5qoBqr8","CXeYGSPSV9f5","Z_yjLm8ba01d","Ws4O50c4u9F5","76bAJ3DDvKx7"],"provenance":[],"toc_visible":true},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}